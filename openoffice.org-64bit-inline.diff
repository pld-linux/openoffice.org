--- cppu/source/uno/assign.hxx.orig	2006-01-16 13:55:04.464641775 +0100
+++ cppu/source/uno/assign.hxx	2006-01-16 13:55:27.213233090 +0100
@@ -50,7 +50,7 @@
 
 
 //--------------------------------------------------------------------------------------------------
-inline void _assignInterface(
+__inline__ __attribute__((always_inline)) void _assignInterface(
 	void ** ppDest, void * pSource,
 	uno_AcquireFunc acquire, uno_ReleaseFunc release )
 	SAL_THROW( () )
@@ -60,7 +60,7 @@
 	*ppDest = pSource;
 }
 //--------------------------------------------------------------------------------------------------
-inline void * _queryInterface(
+__inline__ __attribute__((always_inline)) void * _queryInterface(
 	void * pSource,
 	typelib_TypeDescriptionReference * pDestType,
 	uno_QueryInterfaceFunc queryInterface )
@@ -81,7 +81,7 @@
 	uno_QueryInterfaceFunc queryInterface, uno_AcquireFunc acquire, uno_ReleaseFunc release )
 	SAL_THROW( () );
 //--------------------------------------------------------------------------------------------------
-inline sal_Bool _assignStruct(
+__inline__ __attribute__((always_inline)) sal_Bool _assignStruct(
 	void * pDest, void * pSource,
 	typelib_CompoundTypeDescription * pTypeDescr,
 	uno_QueryInterfaceFunc queryInterface, uno_AcquireFunc acquire, uno_ReleaseFunc release )
@@ -114,7 +114,7 @@
 	return sal_True;
 }
 //--------------------------------------------------------------------------------------------------
-inline sal_Bool _assignArray(
+__inline__ __attribute__((always_inline)) sal_Bool _assignArray(
 	void * pDest, void * pSource,
 	typelib_ArrayTypeDescription * pTypeDescr,
 	uno_QueryInterfaceFunc queryInterface, uno_AcquireFunc acquire, uno_ReleaseFunc release )
@@ -237,7 +237,7 @@
 	return bRet;
 }
 //--------------------------------------------------------------------------------------------------
-inline sal_Bool _assignData(
+__inline__ __attribute__((always_inline)) sal_Bool _assignData(
 	void * pDest,
 	typelib_TypeDescriptionReference * pDestType, typelib_TypeDescription * pDestTypeDescr,
 	void * pSource,
--- cppu/source/uno/constr.hxx.orig	2005-09-08 10:50:56.000000000 +0200
+++ cppu/source/uno/constr.hxx	2006-01-16 13:53:47.953833046 +0100
@@ -46,7 +46,7 @@
 //##################################################################################################
 
 //--------------------------------------------------------------------------------------------------
-inline void _defaultConstructUnion(
+__inline__ __attribute__((always_inline)) void _defaultConstructUnion(
 	void * pMem,
 	typelib_TypeDescription * pTypeDescr )
 	SAL_THROW( () )
@@ -62,7 +62,7 @@
 	typelib_CompoundTypeDescription * pCompType )
 	SAL_THROW( () );
 //--------------------------------------------------------------------------------------------------
-inline void _defaultConstructStruct(
+__inline__ __attribute__((always_inline)) void _defaultConstructStruct(
 	void * pMem,
 	typelib_CompoundTypeDescription * pTypeDescr )
 	SAL_THROW( () )
@@ -83,7 +83,7 @@
 }
 
 //--------------------------------------------------------------------------------------------------
-inline void _defaultConstructArray(
+__inline__ __attribute__((always_inline)) void _defaultConstructArray(
 	void * pMem,
 	typelib_ArrayTypeDescription * pTypeDescr )
 {
@@ -164,7 +164,7 @@
 }
 
 //--------------------------------------------------------------------------------------------------
-inline void _defaultConstructData(
+__inline__ __attribute__((always_inline)) void _defaultConstructData(
 	void * pMem,
 	typelib_TypeDescriptionReference * pType,
 	typelib_TypeDescription * pTypeDescr )
--- cppu/source/uno/copy.hxx.orig	2005-09-08 10:51:21.000000000 +0200
+++ cppu/source/uno/copy.hxx	2006-01-16 13:54:50.840880957 +0100
@@ -47,7 +47,7 @@
 //##################################################################################################
 
 //------------------------------------------------------------------------------
-inline uno_Sequence * allocSeq(
+__inline__ __attribute__((always_inline)) uno_Sequence * allocSeq(
     sal_Int32 nElementSize, sal_Int32 nElements )
 {
     OSL_ASSERT( nElements >= 0 && nElementSize >= 0 );
@@ -73,7 +73,7 @@
 	uno_AcquireFunc acquire, uno_Mapping * mapping )
 	SAL_THROW ( () );
 //--------------------------------------------------------------------------------------------------
-inline void _copyConstructStruct(
+__inline__ __attribute__((always_inline)) void _copyConstructStruct(
 	void * pDest, void * pSource,
 	typelib_CompoundTypeDescription * pTypeDescr,
 	uno_AcquireFunc acquire, uno_Mapping * mapping )
@@ -112,7 +112,7 @@
 	}
 }
 //--------------------------------------------------------------------------------------------------
-inline void _copyConstructArray(
+__inline__ __attribute__((always_inline)) void _copyConstructArray(
 	void * pDest, void * pSource,
 	typelib_ArrayTypeDescription * pTypeDescr,
 	uno_AcquireFunc acquire, uno_Mapping * mapping )
@@ -146,7 +146,7 @@
 	}
 }
 //--------------------------------------------------------------------------------------------------
-inline void _copyConstructUnion(
+__inline__ __attribute__((always_inline)) void _copyConstructUnion(
 	void * pDest, void * pSource,
 	typelib_TypeDescription * pTypeDescr,
 	uno_AcquireFunc acquire, uno_Mapping * mapping )
@@ -178,7 +178,7 @@
 	uno_AcquireFunc acquire, uno_Mapping * mapping );
 
 //--------------------------------------------------------------------------------------------------
-inline void _copyConstructAnyFromData(
+__inline__ __attribute__((always_inline)) void _copyConstructAnyFromData(
 	uno_Any * pDestAny, void * pSource,
 	typelib_TypeDescriptionReference * pType, typelib_TypeDescription * pTypeDescr,
 	uno_AcquireFunc acquire, uno_Mapping * mapping )
@@ -357,7 +357,7 @@
 	}
 }
 //--------------------------------------------------------------------------------------------------
-inline void _copyConstructAny(
+__inline__ __attribute__((always_inline)) void _copyConstructAny(
 	uno_Any * pDestAny, void * pSource,
 	typelib_TypeDescriptionReference * pType, typelib_TypeDescription * pTypeDescr,
 	uno_AcquireFunc acquire, uno_Mapping * mapping )
@@ -542,7 +542,7 @@
 	}
 }
 //------------------------------------------------------------------------------
-inline uno_Sequence * icopyConstructSequence(
+__inline__ __attribute__((always_inline)) uno_Sequence * icopyConstructSequence(
 	uno_Sequence * pSource,
 	typelib_TypeDescriptionReference * pElementType,
 	uno_AcquireFunc acquire, uno_Mapping * mapping )
@@ -751,7 +751,7 @@
 }
 
 //--------------------------------------------------------------------------------------------------
-inline void _copyConstructData(
+__inline__ __attribute__((always_inline)) void _copyConstructData(
 	void * pDest, void * pSource,
 	typelib_TypeDescriptionReference * pType, typelib_TypeDescription * pTypeDescr,
 	uno_AcquireFunc acquire, uno_Mapping * mapping )
--- cppu/source/uno/destr.hxx.orig	2006-01-16 13:55:47.521404651 +0100
+++ cppu/source/uno/destr.hxx	2006-01-16 13:56:16.955406494 +0100
@@ -46,7 +46,7 @@
 //##################################################################################################
 
 //--------------------------------------------------------------------------------------------------
-inline void _destructUnion(
+__inline__ __attribute__((always_inline)) void _destructUnion(
 	void * pValue,
 	typelib_TypeDescription * pTypeDescr,
 	uno_ReleaseFunc release )
@@ -65,7 +65,7 @@
 	uno_ReleaseFunc release )
 	SAL_THROW( () );
 //--------------------------------------------------------------------------------------------------
-inline void _destructStruct(
+__inline__ __attribute__((always_inline)) void _destructStruct(
 	void * pValue,
 	typelib_CompoundTypeDescription * pTypeDescr,
 	uno_ReleaseFunc release )
@@ -88,7 +88,7 @@
 }
 
 //--------------------------------------------------------------------------------------------------
-inline void _destructArray(
+__inline__ __attribute__((always_inline)) void _destructArray(
 	void * pValue,
 	typelib_ArrayTypeDescription * pTypeDescr,
 	uno_ReleaseFunc release )
@@ -118,7 +118,7 @@
 	uno_ReleaseFunc release );
 
 //--------------------------------------------------------------------------------------------------
-inline void _destructAny(
+__inline__ __attribute__((always_inline)) void _destructAny(
 	uno_Any * pAny,
 	uno_ReleaseFunc release )
 	SAL_THROW( () )
@@ -197,7 +197,7 @@
 	::typelib_typedescriptionreference_release( pType );
 }
 //--------------------------------------------------------------------------------------------------
-inline sal_Int32 idestructElements(
+__inline__ __attribute__((always_inline)) sal_Int32 idestructElements(
 	void * pElements, typelib_TypeDescriptionReference * pElementType,
 	sal_Int32 nStartIndex, sal_Int32 nStopIndex,
 	uno_ReleaseFunc release )
@@ -339,7 +339,7 @@
 }
 
 //------------------------------------------------------------------------------
-inline void idestructSequence(
+__inline__ __attribute__((always_inline)) void idestructSequence(
     uno_Sequence * pSeq,
     typelib_TypeDescriptionReference * pType,
     typelib_TypeDescription * pTypeDescr,
@@ -371,7 +371,7 @@
 }
 
 //--------------------------------------------------------------------------------------------------
-inline void _destructData(
+__inline__ __attribute__((always_inline)) void _destructData(
 	void * pValue,
 	typelib_TypeDescriptionReference * pType,
 	typelib_TypeDescription * pTypeDescr,
--- cppu/source/uno/eq.hxx.orig	2006-01-16 13:56:23.580831253 +0100
+++ cppu/source/uno/eq.hxx	2006-01-16 13:56:42.250392441 +0100
@@ -53,7 +53,7 @@
 //##################################################################################################
 
 //--------------------------------------------------------------------------------------------------
-inline sal_Bool _equalObject(
+__inline__ __attribute__((always_inline)) sal_Bool _equalObject(
 	void * pI1, void * pI2,
 	uno_QueryInterfaceFunc queryInterface, uno_ReleaseFunc release )
 	SAL_THROW( () )
@@ -89,7 +89,7 @@
 	uno_QueryInterfaceFunc queryInterface, uno_ReleaseFunc release )
 	SAL_THROW( () );
 //--------------------------------------------------------------------------------------------------
-inline sal_Bool _equalStruct(
+__inline__ __attribute__((always_inline)) sal_Bool _equalStruct(
 	void * pDest, void *pSource,
 	typelib_CompoundTypeDescription * pTypeDescr,
 	uno_QueryInterfaceFunc queryInterface, uno_ReleaseFunc release )
@@ -126,7 +126,7 @@
 	uno_QueryInterfaceFunc queryInterface, uno_ReleaseFunc release )
 	SAL_THROW( () );
 //--------------------------------------------------------------------------------------------------
-inline sal_Bool _equalSequence(
+__inline__ __attribute__((always_inline)) sal_Bool _equalSequence(
 	uno_Sequence * pDest, uno_Sequence * pSource,
 	typelib_TypeDescriptionReference * pElementType,
 	uno_QueryInterfaceFunc queryInterface, uno_ReleaseFunc release )
@@ -307,7 +307,7 @@
 	return sal_False;
 }
 //--------------------------------------------------------------------------------------------------
-inline sal_Bool _equalData(
+__inline__ __attribute__((always_inline)) sal_Bool _equalData(
 	void * pDest,
 	typelib_TypeDescriptionReference * pDestType, typelib_TypeDescription * pDestTypeDescr,
 	void * pSource,
--- cppu/source/uno/prim.hxx.orig	2006-01-16 13:56:50.243492033 +0100
+++ cppu/source/uno/prim.hxx	2006-01-16 13:57:21.161141190 +0100
@@ -83,7 +83,7 @@
 extern typelib_TypeDescriptionReference * g_pVoidType;
 
 //--------------------------------------------------------------------------------------------------
-inline void * _map(
+__inline__ __attribute__((always_inline)) void * _map(
 	void * p,
 	typelib_TypeDescriptionReference * pType, typelib_TypeDescription * pTypeDescr,
 	uno_Mapping * mapping )
@@ -108,7 +108,7 @@
 	return pRet;
 }
 //--------------------------------------------------------------------------------------------------
-inline void _acquire( void * p, uno_AcquireFunc acquire ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) void _acquire( void * p, uno_AcquireFunc acquire ) SAL_THROW( () )
 {
 	if (p)
 	{
@@ -123,7 +123,7 @@
 	}
 }
 //--------------------------------------------------------------------------------------------------
-inline void _release( void * p, uno_ReleaseFunc release ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) void _release( void * p, uno_ReleaseFunc release ) SAL_THROW( () )
 {
 	if (p)
 	{
@@ -139,7 +139,7 @@
 }
 
 //------------------------------------------------------------------------------
-inline sal_uInt32 calcSeqMemSize(
+__inline__ __attribute__((always_inline)) sal_uInt32 calcSeqMemSize(
     sal_Int32 nElementSize, sal_Int32 nElements )
 {
     sal_uInt64 nSize =
@@ -152,13 +152,13 @@
 }
 
 //--------------------------------------------------------------------------------------------------
-inline uno_Sequence * createEmptySequence() SAL_THROW( () )
+__inline__ __attribute__((always_inline)) uno_Sequence * createEmptySequence() SAL_THROW( () )
 {
 	::osl_incrementInterlockedCount( &g_emptySeq.nRefCount );
 	return &g_emptySeq;
 }
 //--------------------------------------------------------------------------------------------------
-inline typelib_TypeDescriptionReference * _getVoidType()
+__inline__ __attribute__((always_inline)) typelib_TypeDescriptionReference * _getVoidType()
 	SAL_THROW( () )
 {
 	if (! g_pVoidType)
@@ -188,7 +188,7 @@
 void * binuno_queryInterface( void * pUnoI, typelib_TypeDescriptionReference * pDestType );
 
 //--------------------------------------------------------------------------------------------------
-inline typelib_TypeDescriptionReference * _unionGetSetType(
+__inline__ __attribute__((always_inline)) typelib_TypeDescriptionReference * _unionGetSetType(
 	void * pUnion, typelib_TypeDescription * pTD )
 	SAL_THROW( () )
 {
@@ -214,7 +214,7 @@
 	return pRet;
 }
 //--------------------------------------------------------------------------------------------------
-inline sal_Bool _type_equals(
+__inline__ __attribute__((always_inline)) sal_Bool _type_equals(
 	typelib_TypeDescriptionReference * pType1, typelib_TypeDescriptionReference * pType2 )
 	SAL_THROW( () )
 {
--- stoc/source/registry_tdprovider/base.hxx.orig	2006-01-16 14:17:21.542252132 +0100
+++ stoc/source/registry_tdprovider/base.hxx	2006-01-16 14:18:13.507903361 +0100
@@ -141,7 +141,7 @@
 extern rtl_StandardModuleCount g_moduleCount;
 
 //--------------------------------------------------------------------------------------------------
-inline sal_Int32 getRTValueAsInt32( const RTConstValue & rVal )
+__inline__ __attribute__((always_inline)) sal_Int32 getRTValueAsInt32( const RTConstValue & rVal )
 {
 	switch (rVal.m_type)
 	{
@@ -160,7 +160,7 @@
 	return 0;
 }
 //--------------------------------------------------------------------------------------------------
-inline Any getRTValue( const RTConstValue & rVal )
+__inline__ __attribute__((always_inline)) Any getRTValue( const RTConstValue & rVal )
 {
 	switch (rVal.m_type)
 	{
--- xmlscript/source/xmldlg_imexp/exp_share.hxx.orig	2006-01-16 14:22:43.893650843 +0100
+++ xmlscript/source/xmldlg_imexp/exp_share.hxx	2006-01-16 14:23:53.559096084 +0100
@@ -71,7 +71,7 @@
     
     ::rtl::OUString _id;
     
-    inline Style( short all_ ) SAL_THROW( () )
+    __inline__ __attribute__((always_inline)) Style( short all_ ) SAL_THROW( () )
         : _fontRelief( css::awt::FontRelief::NONE )
         , _fontEmphasisMark( css::awt::FontEmphasisMark::NONE )
         , _all( all_ )
@@ -100,7 +100,7 @@
     css::uno::Reference< css::beans::XPropertyState > _xPropState;
     
 public:
-    inline ElementDescriptor(
+    __inline__ __attribute__((always_inline)) ElementDescriptor(
         css::uno::Reference< css::beans::XPropertySet > const & xProps,
         css::uno::Reference< css::beans::XPropertyState > const & xPropState,
         ::rtl::OUString const & name )
@@ -109,39 +109,39 @@
         , _xProps( xProps )
         , _xPropState( xPropState )
         {}
-    inline ElementDescriptor(
+    __inline__ __attribute__((always_inline)) ElementDescriptor(
         ::rtl::OUString const & name )
         SAL_THROW( () )
         : XMLElement( name )
         {}
 
     template<typename T>
-    inline void read(
+    __inline__ __attribute__((always_inline)) void read(
         ::rtl::OUString const & propName, ::rtl::OUString const & attrName,
         bool forceAttribute = false );
     
     //
     template<typename T>
-    inline bool readProp( T * ret, ::rtl::OUString const & rPropName );
+    __inline__ __attribute__((always_inline)) bool readProp( T * ret, ::rtl::OUString const & rPropName );
     css::uno::Any readProp( ::rtl::OUString const & rPropName );
     //
     void readDefaults( bool supportPrintable = true );
     //
     void readStringAttr(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName );
-    inline void readDoubleAttr(
+    __inline__ __attribute__((always_inline)) void readDoubleAttr(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName )
         { read<double>( rPropName, rAttrName ); }
-    inline void readLongAttr(
+    __inline__ __attribute__((always_inline)) void readLongAttr(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName,
         bool forceAttribute = false )
         { read<sal_Int32>( rPropName, rAttrName, forceAttribute ); }
     void readHexLongAttr(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName );
-    inline void readShortAttr(
+    __inline__ __attribute__((always_inline)) void readShortAttr(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName )
         { read<sal_Int32>( rPropName, rAttrName ); }
-    inline void readBoolAttr(
+    __inline__ __attribute__((always_inline)) void readBoolAttr(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName )
         { read<sal_Bool>( rPropName, rAttrName ); }
     
@@ -164,7 +164,7 @@
     void readLineEndFormatAttr(
         ::rtl::OUString const & rPropName, ::rtl::OUString const & rAttrName );
     //
-    inline void addBoolAttr(
+    __inline__ __attribute__((always_inline)) void addBoolAttr(
         ::rtl::OUString const & rAttrName, sal_Bool bValue )
         { addAttribute( rAttrName, ::rtl::OUString::valueOf(bValue) ); }
     void addNumberFormatAttr(
@@ -218,7 +218,7 @@
 };
 
 template<typename T>
-inline void ElementDescriptor::read(
+__inline__ __attribute__((always_inline)) void ElementDescriptor::read(
     ::rtl::OUString const & propName, ::rtl::OUString const & attrName,
     bool forceAttribute )
 {
@@ -236,7 +236,7 @@
 }
 
 template<typename T>
-inline bool ElementDescriptor::readProp(
+__inline__ __attribute__((always_inline)) bool ElementDescriptor::readProp(
     T * ret, ::rtl::OUString const & rPropName )
 {
     _xProps->getPropertyValue( rPropName ) >>= *ret;
--- xmlscript/source/xmldlg_imexp/imp_share.hxx.orig	2006-01-16 14:24:07.990666679 +0100
+++ xmlscript/source/xmldlg_imexp/imp_share.hxx	2006-01-16 14:26:13.145925788 +0100
@@ -59,7 +59,7 @@
 {
 
 //
-inline sal_Int32 toInt32( ::rtl::OUString const & rStr ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Int32 toInt32( ::rtl::OUString const & rStr ) SAL_THROW( () )
 {
     sal_Int32 nVal;
     if (rStr.getLength() > 2 && rStr[ 0 ] == '0' && rStr[ 1 ] == 'x')
@@ -69,7 +69,7 @@
     return nVal;
 }
 
-inline bool getBoolAttr(
+__inline__ __attribute__((always_inline)) bool getBoolAttr(
     sal_Bool * pRet, ::rtl::OUString const & rAttrName, 
     css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
     sal_Int32 nUid )
@@ -97,7 +97,7 @@
     return false;
 }
 
-inline bool getStringAttr(
+__inline__ __attribute__((always_inline)) bool getStringAttr(
     ::rtl::OUString * pRet, ::rtl::OUString const & rAttrName, 
     css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
     sal_Int32 nUid )
@@ -106,7 +106,7 @@
     return (pRet->getLength() > 0);
 }
 
-inline bool getLongAttr(
+__inline__ __attribute__((always_inline)) bool getLongAttr(
     sal_Int32 * pRet, ::rtl::OUString const & rAttrName, 
     css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
     sal_Int32 nUid )
@@ -140,7 +140,7 @@
     sal_Int32 XMLNS_DIALOGS_UID, XMLNS_SCRIPT_UID;
     
 public:
-    inline bool isEventElement(
+    __inline__ __attribute__((always_inline)) bool isEventElement(
         sal_Int32 nUid, ::rtl::OUString const & rLocalName )
     {
         return ((XMLNS_SCRIPT_UID == nUid &&
@@ -161,12 +161,12 @@
         ::rtl::OUString const & rStyleId ) const
         SAL_THROW( () );
     
-    inline css::uno::Reference< css::uno::XComponentContext >
+    __inline__ __attribute__((always_inline)) css::uno::Reference< css::uno::XComponentContext >
     const & getComponentContext() SAL_THROW( () ) { return _xContext; }
     css::uno::Reference< css::util::XNumberFormatsSupplier >
     const & getNumberFormatsSupplier();
     
-    inline DialogImport(
+    __inline__ __attribute__((always_inline)) DialogImport(
         css::uno::Reference<css::uno::XComponentContext> const & xContext,
         css::uno::Reference<css::container::XNameContainer>
         const & xDialogModel )
@@ -257,7 +257,7 @@
         css::uno::Reference<css::xml::input::XAttributes> const & xAttributes )
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline StylesElement(
+    __inline__ __attribute__((always_inline)) StylesElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -312,7 +312,7 @@
     bool importVisualEffectStyle(
         css::uno::Reference< css::beans::XPropertySet > const & xProps );
     
-    inline StyleElement(
+    __inline__ __attribute__((always_inline)) StyleElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -342,7 +342,7 @@
         css::uno::Reference<css::xml::input::XAttributes> const & xAttributes )
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline MenuPopupElement(
+    __inline__ __attribute__((always_inline)) MenuPopupElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -387,7 +387,7 @@
     ::rtl::OUString _aId;
     
 public:
-    inline ImportContext(
+    __inline__ __attribute__((always_inline)) ImportContext(
         DialogImport * pImport,
         css::uno::Reference< css::beans::XPropertySet > const & xControlModel_,
         ::rtl::OUString const & id )
@@ -396,7 +396,7 @@
           _aId( id )
         { OSL_ASSERT( _xControlModel.is() ); }
     
-    inline css::uno::Reference< css::beans::XPropertySet > getControlModel()
+    __inline__ __attribute__((always_inline)) css::uno::Reference< css::beans::XPropertySet > getControlModel()
         { return _xControlModel; }
     
     void importDefaults(
@@ -462,7 +462,7 @@
 class ControlImportContext : public ImportContext
 {
 public:
-    inline ControlImportContext(
+    __inline__ __attribute__((always_inline)) ControlImportContext(
         DialogImport * pImport,
         ::rtl::OUString const & rId, ::rtl::OUString const & rControlName )
         : ImportContext(
@@ -471,7 +471,7 @@
                 pImport->_xDialogModelFactory->createInstance( rControlName ),
                 css::uno::UNO_QUERY_THROW ), rId )
         {}
-    inline ~ControlImportContext()
+    __inline__ __attribute__((always_inline)) ~ControlImportContext()
     {
         _pImport->_xDialogModel->insertByName(
             _aId, css::uno::makeAny(
@@ -493,7 +493,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline WindowElement(
+    __inline__ __attribute__((always_inline)) WindowElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -510,7 +510,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline EventElement(
+    __inline__ __attribute__((always_inline)) EventElement(
         sal_Int32 nUid, ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -530,7 +530,7 @@
         css::uno::Reference<css::xml::input::XAttributes> const & xAttributes )
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline BulletinBoardElement(
+    __inline__ __attribute__((always_inline)) BulletinBoardElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -550,7 +550,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline ButtonElement(
+    __inline__ __attribute__((always_inline)) ButtonElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -572,7 +572,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline CheckBoxElement(
+    __inline__ __attribute__((always_inline)) CheckBoxElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -595,7 +595,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline ComboBoxElement(
+    __inline__ __attribute__((always_inline)) ComboBoxElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -618,7 +618,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline MenuListElement(
+    __inline__ __attribute__((always_inline)) MenuListElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -638,7 +638,7 @@
         css::uno::Reference<css::xml::input::XAttributes> const & xAttributes )
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline RadioElement(
+    __inline__ __attribute__((always_inline)) RadioElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -661,7 +661,7 @@
     void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline RadioGroupElement(
+    __inline__ __attribute__((always_inline)) RadioGroupElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -685,7 +685,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline TitledBoxElement(
+    __inline__ __attribute__((always_inline)) TitledBoxElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -707,7 +707,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline TextElement(
+    __inline__ __attribute__((always_inline)) TextElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -729,7 +729,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline TextFieldElement(
+    __inline__ __attribute__((always_inline)) TextFieldElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -751,7 +751,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline ImageControlElement(
+    __inline__ __attribute__((always_inline)) ImageControlElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -773,7 +773,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline FileControlElement(
+    __inline__ __attribute__((always_inline)) FileControlElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -795,7 +795,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline CurrencyFieldElement(
+    __inline__ __attribute__((always_inline)) CurrencyFieldElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -817,7 +817,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline DateFieldElement(
+    __inline__ __attribute__((always_inline)) DateFieldElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -839,7 +839,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline NumericFieldElement(
+    __inline__ __attribute__((always_inline)) NumericFieldElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -861,7 +861,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline TimeFieldElement(
+    __inline__ __attribute__((always_inline)) TimeFieldElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -883,7 +883,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline PatternFieldElement(
+    __inline__ __attribute__((always_inline)) PatternFieldElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -905,7 +905,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline FormattedFieldElement(
+    __inline__ __attribute__((always_inline)) FormattedFieldElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -927,7 +927,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline FixedLineElement(
+    __inline__ __attribute__((always_inline)) FixedLineElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -949,7 +949,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline ScrollBarElement(
+    __inline__ __attribute__((always_inline)) ScrollBarElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
@@ -971,7 +971,7 @@
     virtual void SAL_CALL endElement()
         throw (css::xml::sax::SAXException, css::uno::RuntimeException);
     
-    inline ProgressBarElement(
+    __inline__ __attribute__((always_inline)) ProgressBarElement(
         ::rtl::OUString const & rLocalName,
         css::uno::Reference< css::xml::input::XAttributes > const & xAttributes,
         ElementBase * pParent, DialogImport * pImport )
--- ucb/source/ucp/file/filinl.hxx.orig	2006-01-16 14:28:42.434450125 +0100
+++ ucb/source/ucp/file/filinl.hxx	2006-01-16 14:29:13.027180332 +0100
@@ -35,52 +35,52 @@
 #ifndef _FILINL_HXX_
 #define _FILINL_HXX_
 
-inline const sal_Bool& SAL_CALL shell::MyProperty::IsNative() const
+__inline__ __attribute__((always_inline)) const sal_Bool& SAL_CALL shell::MyProperty::IsNative() const
 {
 	return isNative;
 }
-inline const rtl::OUString& SAL_CALL shell::MyProperty::getPropertyName() const
+__inline__ __attribute__((always_inline)) const rtl::OUString& SAL_CALL shell::MyProperty::getPropertyName() const
 {
 	return PropertyName;
 }
-inline const sal_Int32& SAL_CALL shell::MyProperty::getHandle() const
+__inline__ __attribute__((always_inline)) const sal_Int32& SAL_CALL shell::MyProperty::getHandle() const
 {
 	return Handle;
 }
-inline const com::sun::star::uno::Type& SAL_CALL shell::MyProperty::getType() const
+__inline__ __attribute__((always_inline)) const com::sun::star::uno::Type& SAL_CALL shell::MyProperty::getType() const
 {
 	return Typ;
 }
 
-inline const com::sun::star::uno::Any& SAL_CALL shell::MyProperty::getValue() const
+__inline__ __attribute__((always_inline)) const com::sun::star::uno::Any& SAL_CALL shell::MyProperty::getValue() const
 { 
 	return Value;
 }
-inline const com::sun::star::beans::PropertyState& SAL_CALL shell::MyProperty::getState() const
+__inline__ __attribute__((always_inline)) const com::sun::star::beans::PropertyState& SAL_CALL shell::MyProperty::getState() const
 {
 	return State;
 }
-inline const sal_Int16& SAL_CALL shell::MyProperty::getAttributes() const
+__inline__ __attribute__((always_inline)) const sal_Int16& SAL_CALL shell::MyProperty::getAttributes() const
 {
 	return Attributes;
 }
-inline void SAL_CALL shell::MyProperty::setHandle( const sal_Int32& __Handle ) const
+__inline__ __attribute__((always_inline)) void SAL_CALL shell::MyProperty::setHandle( const sal_Int32& __Handle ) const
 {
 	(( MyProperty* )this )->Handle = __Handle;
 }
-inline void SAL_CALL shell::MyProperty::setType( const com::sun::star::uno::Type& __Typ ) const
+__inline__ __attribute__((always_inline)) void SAL_CALL shell::MyProperty::setType( const com::sun::star::uno::Type& __Typ ) const
 {
 	(( MyProperty* )this )->Typ = __Typ;
 }
-inline void SAL_CALL shell::MyProperty::setValue( const com::sun::star::uno::Any& __Value ) const
+__inline__ __attribute__((always_inline)) void SAL_CALL shell::MyProperty::setValue( const com::sun::star::uno::Any& __Value ) const
 {
 	(( MyProperty* )this )->Value = __Value;
 }
-inline void SAL_CALL shell::MyProperty::setState( const com::sun::star::beans::PropertyState& __State ) const
+__inline__ __attribute__((always_inline)) void SAL_CALL shell::MyProperty::setState( const com::sun::star::beans::PropertyState& __State ) const
 {
 	(( MyProperty* )this )->State = __State;
 }
-inline void SAL_CALL shell::MyProperty::setAttributes( const sal_Int16& __Attributes ) const
+__inline__ __attribute__((always_inline)) void SAL_CALL shell::MyProperty::setAttributes( const sal_Int16& __Attributes ) const
 {
 	(( MyProperty* )this )->Attributes = __Attributes;
 }
--- ucb/source/ucp/file/shell.hxx.orig	2006-01-16 14:29:19.203712596 +0100
+++ ucb/source/ucp/file/shell.hxx	2006-01-16 14:29:28.972391253 +0100
@@ -174,20 +174,20 @@
 						const sal_Int16&                             __Attributes );
 
 			~MyProperty();
-			inline const sal_Bool& SAL_CALL IsNative() const;
-			inline const rtl::OUString& SAL_CALL getPropertyName() const;
-			inline const sal_Int32& SAL_CALL getHandle() const;
-			inline const com::sun::star::uno::Type& SAL_CALL getType() const;
-			inline const com::sun::star::uno::Any& SAL_CALL getValue() const;
-			inline const com::sun::star::beans::PropertyState& SAL_CALL getState() const;
-			inline const sal_Int16& SAL_CALL getAttributes() const;
+			__inline__ __attribute__((always_inline)) const sal_Bool& SAL_CALL IsNative() const;
+			__inline__ __attribute__((always_inline)) const rtl::OUString& SAL_CALL getPropertyName() const;
+			__inline__ __attribute__((always_inline)) const sal_Int32& SAL_CALL getHandle() const;
+			__inline__ __attribute__((always_inline)) const com::sun::star::uno::Type& SAL_CALL getType() const;
+			__inline__ __attribute__((always_inline)) const com::sun::star::uno::Any& SAL_CALL getValue() const;
+			__inline__ __attribute__((always_inline)) const com::sun::star::beans::PropertyState& SAL_CALL getState() const;
+			__inline__ __attribute__((always_inline)) const sal_Int16& SAL_CALL getAttributes() const;
 
 			// The set* functions are declared const, because the key of "this" stays intact
-			inline void SAL_CALL setHandle( const sal_Int32&  __Handle ) const;
-			inline void SAL_CALL setType( const com::sun::star::uno::Type& __Type ) const;
-			inline void SAL_CALL setValue( const com::sun::star::uno::Any& __Value ) const;
-			inline void SAL_CALL setState( const com::sun::star::beans::PropertyState& __State ) const;
-			inline void SAL_CALL setAttributes( const sal_Int16& __Attributes ) const;
+			__inline__ __attribute__((always_inline)) void SAL_CALL setHandle( const sal_Int32&  __Handle ) const;
+			__inline__ __attribute__((always_inline)) void SAL_CALL setType( const com::sun::star::uno::Type& __Type ) const;
+			__inline__ __attribute__((always_inline)) void SAL_CALL setValue( const com::sun::star::uno::Any& __Value ) const;
+			__inline__ __attribute__((always_inline)) void SAL_CALL setState( const com::sun::star::beans::PropertyState& __State ) const;
+			__inline__ __attribute__((always_inline)) void SAL_CALL setAttributes( const sal_Int16& __Attributes ) const;
 		};
 
 		struct eMyProperty
--- configmgr/source/backend/binaryreader.hxx.orig	2005-09-08 05:26:23.000000000 +0200
+++ configmgr/source/backend/binaryreader.hxx	2006-01-16 15:22:25.297474562 +0100
@@ -102,7 +102,7 @@
 			void read(StringList &_aValue)  SAL_THROW( (io::IOException, uno::RuntimeException) );
 
 		private:
-			inline uno::Reference<io::XDataInputStream> getDataInputStream();
+			__inline__ __attribute__((always_inline)) uno::Reference<io::XDataInputStream> getDataInputStream();
 		};
 		// --------------------------------------------------------------------------
 
--- configmgr/source/backend/layerdefaultremover.hxx.orig	2006-01-16 15:22:42.793317188 +0100
+++ configmgr/source/backend/layerdefaultremover.hxx	2006-01-16 15:22:51.172324229 +0100
@@ -127,8 +127,8 @@
         private:
             void playBackNodeStack( bool bPlayProperty=false);
             void raiseMalformedDataException(sal_Char const * pMsg);
-            inline bool hasPendingProperty();
-            inline void clearPendingProperty();
+            __inline__ __attribute__((always_inline)) bool hasPendingProperty();
+            __inline__ __attribute__((always_inline)) void clearPendingProperty();
         private:
             ResultHandler	m_xResultHandler;
             typedef std::vector<OUString> NodeStack;
--- configmgr/source/backend/updatedata.hxx.orig	2006-01-16 15:22:56.462066028 +0100
+++ configmgr/source/backend/updatedata.hxx	2006-01-16 15:23:03.585371703 +0100
@@ -252,7 +252,7 @@
             OUString primarySlot() const { return OUString(); }
 
             static uno::Any const & getResetMarker();
-            static inline bool isResetMarker(uno::Any const & _aValue);
+            static __inline__ __attribute__((always_inline)) bool isResetMarker(uno::Any const & _aValue);
 
             virtual PropertyUpdate  * asPropertyUpdate();
         };
--- bridges/source/remote/static/remote_types.hxx.orig	2006-01-16 15:26:51.665122950 +0100
+++ bridges/source/remote/static/remote_types.hxx	2006-01-16 15:27:02.484549621 +0100
@@ -49,7 +49,7 @@
 namespace bridges_remote
 {
 	
-inline sal_Bool SAL_CALL remote_relatesToInterface( typelib_TypeDescription *pTypeDescr );
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL remote_relatesToInterface( typelib_TypeDescription *pTypeDescr );
 sal_Bool SAL_CALL remote_relatesToInterface2( typelib_TypeDescription * pTypeDescr );
 
 
@@ -58,7 +58,7 @@
 	@param pTypeDescr type description of type
 	@return true if type might relate to an interface, false otherwise
 */
-inline sal_Bool SAL_CALL remote_relatesToInterface( typelib_TypeDescription * pTypeDescr )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL remote_relatesToInterface( typelib_TypeDescription * pTypeDescr )
 {
 	switch (pTypeDescr->eTypeClass)
 	{
@@ -96,7 +96,7 @@
 	@param pTypeDescr type description of type
 	@return true if type is a cpp simple type, false otherwise
 */
-inline sal_Bool SAL_CALL remote_isSimpleType( typelib_TypeDescription * pTypeDescr )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL remote_isSimpleType( typelib_TypeDescription * pTypeDescr )
 {
 	return (pTypeDescr->eTypeClass <= typelib_TypeClass_ENUM &&
 			pTypeDescr->eTypeClass != typelib_TypeClass_STRING &&
--- configmgr/source/data/anydata.cxx.orig	2005-09-08 05:38:56.000000000 +0200
+++ configmgr/source/data/anydata.cxx	2006-01-16 16:16:35.882302834 +0100
@@ -270,7 +270,7 @@
 //-----------------------------------------------------------------------------	
 
 template <class E>
-inline
+__inline__ __attribute__((always_inline))
 sal_Sequence const * extractSequenceData(uno::Sequence< E > & _rSeq, uno::Any const & _aAny)
 {
     if (_aAny >>= _rSeq)
--- cppu/inc/com/sun/star/uno/Any.hxx.orig	2006-01-16 16:26:42.632041369 +0100
+++ cppu/inc/com/sun/star/uno/Any.hxx	2006-01-16 16:27:11.202248785 +0100
@@ -64,14 +64,14 @@
 {     
 
 //__________________________________________________________________________________________________
-inline Any::Any() SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Any::Any() SAL_THROW( () )
 {
 	::uno_any_construct( this, 0, 0, (uno_AcquireFunc)cpp_acquire );
 }
 
 //______________________________________________________________________________
 template <typename T>
-inline Any::Any( T const & value )
+__inline__ __attribute__((always_inline)) Any::Any( T const & value )
 {
 	::uno_type_any_construct(
 		this, const_cast<T *>(&value),
@@ -79,7 +79,7 @@
         (uno_AcquireFunc) cpp_acquire );
 }
 //______________________________________________________________________________
-inline Any::Any( bool value )
+__inline__ __attribute__((always_inline)) Any::Any( bool value )
 {
     sal_Bool b = value;
 	::uno_type_any_construct(
@@ -88,37 +88,37 @@
 }
 
 //__________________________________________________________________________________________________
-inline Any::Any( const Any & rAny ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Any::Any( const Any & rAny ) SAL_THROW( () )
 {
 	::uno_type_any_construct( this, rAny.pData, rAny.pType, (uno_AcquireFunc)cpp_acquire );
 }
 //__________________________________________________________________________________________________
-inline Any::Any( const void * pData_, const Type & rType ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Any::Any( const void * pData_, const Type & rType ) SAL_THROW( () )
 {
 	::uno_type_any_construct(
 		this, const_cast< void * >( pData_ ), rType.getTypeLibType(),
         (uno_AcquireFunc)cpp_acquire );
 }
 //__________________________________________________________________________________________________
-inline Any::Any( const void * pData_, typelib_TypeDescription * pTypeDescr ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Any::Any( const void * pData_, typelib_TypeDescription * pTypeDescr ) SAL_THROW( () )
 {
 	::uno_any_construct(
 		this, const_cast< void * >( pData_ ), pTypeDescr, (uno_AcquireFunc)cpp_acquire );
 }
 //__________________________________________________________________________________________________
-inline Any::Any( const void * pData_, typelib_TypeDescriptionReference * pType_ ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Any::Any( const void * pData_, typelib_TypeDescriptionReference * pType_ ) SAL_THROW( () )
 {
 	::uno_type_any_construct(
 		this, const_cast< void * >( pData_ ), pType_, (uno_AcquireFunc)cpp_acquire );
 }
 //__________________________________________________________________________________________________
-inline Any::~Any() SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Any::~Any() SAL_THROW( () )
 {
 	::uno_any_destruct(
 		this, (uno_ReleaseFunc)cpp_release );
 }
 //__________________________________________________________________________________________________
-inline Any & Any::operator = ( const Any & rAny ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Any & Any::operator = ( const Any & rAny ) SAL_THROW( () )
 {
 	if (this != &rAny)
 	{
@@ -129,39 +129,39 @@
 	return *this;
 }
 //__________________________________________________________________________________________________
-inline ::rtl::OUString Any::getValueTypeName() const SAL_THROW( () )
+__inline__ __attribute__((always_inline)) ::rtl::OUString Any::getValueTypeName() const SAL_THROW( () )
 {
 	return ::rtl::OUString( pType->pTypeName );
 }
 //__________________________________________________________________________________________________
-inline void Any::setValue( const void * pData_, const Type & rType ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) void Any::setValue( const void * pData_, const Type & rType ) SAL_THROW( () )
 {
 	::uno_type_any_assign(
 		this, const_cast< void * >( pData_ ), rType.getTypeLibType(),
         (uno_AcquireFunc)cpp_acquire, (uno_ReleaseFunc)cpp_release );
 }
 //__________________________________________________________________________________________________
-inline void Any::setValue( const void * pData_, typelib_TypeDescriptionReference * pType_ ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) void Any::setValue( const void * pData_, typelib_TypeDescriptionReference * pType_ ) SAL_THROW( () )
 {
 	::uno_type_any_assign(
 		this, const_cast< void * >( pData_ ), pType_,
         (uno_AcquireFunc)cpp_acquire, (uno_ReleaseFunc)cpp_release );
 }
 //__________________________________________________________________________________________________
-inline void Any::setValue( const void * pData_, typelib_TypeDescription * pTypeDescr ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) void Any::setValue( const void * pData_, typelib_TypeDescription * pTypeDescr ) SAL_THROW( () )
 {
 	::uno_any_assign(
 		this, const_cast< void * >( pData_ ), pTypeDescr,
         (uno_AcquireFunc)cpp_acquire, (uno_ReleaseFunc)cpp_release );
 }
 //__________________________________________________________________________________________________
-inline void Any::clear() SAL_THROW( () )
+__inline__ __attribute__((always_inline)) void Any::clear() SAL_THROW( () )
 {
 	::uno_any_clear(
 		this, (uno_ReleaseFunc)cpp_release );
 }
 //__________________________________________________________________________________________________
-inline sal_Bool Any::isExtractableTo( const Type & rType ) const SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool Any::isExtractableTo( const Type & rType ) const SAL_THROW( () )
 {
     return ::uno_type_isAssignableFromData(
         rType.getTypeLibType(), pData, pType,
@@ -170,7 +170,7 @@
 
 //______________________________________________________________________________
 template <typename T>
-inline bool Any::has() const
+__inline__ __attribute__((always_inline)) bool Any::has() const
 {
     Type const & rType = ::cppu::getTypeFavourUnsigned(static_cast< T * >(0));
     return ::uno_type_isAssignableFromData(
@@ -185,14 +185,14 @@
 #endif // ! defined(__SUNPRO_CC)
 
 //__________________________________________________________________________________________________
-inline sal_Bool Any::operator == ( const Any & rAny ) const SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool Any::operator == ( const Any & rAny ) const SAL_THROW( () )
 {
 	return ::uno_type_equalData(
 		pData, pType, rAny.pData, rAny.pType,
         (uno_QueryInterfaceFunc)cpp_queryInterface, (uno_ReleaseFunc)cpp_release );
 }
 //__________________________________________________________________________________________________
-inline sal_Bool Any::operator != ( const Any & rAny ) const SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool Any::operator != ( const Any & rAny ) const SAL_THROW( () )
 {
 	return (! ::uno_type_equalData(
 		pData, pType, rAny.pData, rAny.pType,
@@ -201,7 +201,7 @@
 
 //__________________________________________________________________________________________________
 template< class C >
-inline Any SAL_CALL makeAny( const C & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Any SAL_CALL makeAny( const C & value ) SAL_THROW( () )
 { 
 	return Any( &value, ::cppu::getTypeFavourUnsigned(&value) );
 }
@@ -209,7 +209,7 @@
 // additionally specialized for C++ bool
 //______________________________________________________________________________
 template<>
-inline Any SAL_CALL makeAny( bool const & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Any SAL_CALL makeAny( bool const & value ) SAL_THROW( () )
 {
     const sal_Bool b = value;
 	return Any( &b, ::getCppuBooleanType() );
@@ -217,7 +217,7 @@
 
 //__________________________________________________________________________________________________
 template< class C >
-inline void SAL_CALL operator <<= ( Any & rAny, const C & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) void SAL_CALL operator <<= ( Any & rAny, const C & value ) SAL_THROW( () )
 { 
 	const Type & rType = ::cppu::getTypeFavourUnsigned(&value);
 	::uno_type_any_assign(
@@ -227,7 +227,7 @@
 
 // additionally for C++ bool:
 //______________________________________________________________________________
-inline void SAL_CALL operator <<= ( Any & rAny, bool const & value )
+__inline__ __attribute__((always_inline)) void SAL_CALL operator <<= ( Any & rAny, bool const & value )
     SAL_THROW( () )
 {
     sal_Bool b = value;
@@ -238,7 +238,7 @@
 
 //__________________________________________________________________________________________________
 template< class C >
-inline sal_Bool SAL_CALL operator >>= ( const Any & rAny, C & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator >>= ( const Any & rAny, C & value ) SAL_THROW( () )
 {
 	const Type & rType = ::cppu::getTypeFavourUnsigned(&value);
 	return ::uno_type_assignData(
@@ -250,7 +250,7 @@
 
 // bool
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator >>= ( const ::com::sun::star::uno::Any & rAny, sal_Bool & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator >>= ( const ::com::sun::star::uno::Any & rAny, sal_Bool & value ) SAL_THROW( () )
 {
 	if (typelib_TypeClass_BOOLEAN == rAny.pType->eTypeClass)
 	{
@@ -260,7 +260,7 @@
 	return sal_False;
 }
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator == ( const Any & rAny, const sal_Bool & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator == ( const Any & rAny, const sal_Bool & value ) SAL_THROW( () )
 {
 	return (typelib_TypeClass_BOOLEAN == rAny.pType->eTypeClass &&
 			(value != sal_False) == (* reinterpret_cast< const sal_Bool * >( &rAny.pReserved ) != sal_False));
@@ -268,7 +268,7 @@
 
 //______________________________________________________________________________
 template<>
-inline sal_Bool SAL_CALL operator >>= ( Any const & rAny, bool & value )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator >>= ( Any const & rAny, bool & value )
     SAL_THROW( () )
 {
 	if (rAny.pType->eTypeClass == typelib_TypeClass_BOOLEAN)
@@ -282,7 +282,7 @@
 
 //______________________________________________________________________________
 template<>
-inline sal_Bool SAL_CALL operator == ( Any const & rAny, bool const & value )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator == ( Any const & rAny, bool const & value )
     SAL_THROW( () )
 {
 	return (rAny.pType->eTypeClass == typelib_TypeClass_BOOLEAN &&
@@ -293,7 +293,7 @@
 
 // byte
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator >>= ( const ::com::sun::star::uno::Any & rAny, sal_Int8 & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator >>= ( const ::com::sun::star::uno::Any & rAny, sal_Int8 & value ) SAL_THROW( () )
 {
 	if (typelib_TypeClass_BYTE == rAny.pType->eTypeClass)
 	{
@@ -304,7 +304,7 @@
 }
 // short
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator >>= ( const Any & rAny, sal_Int16 & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator >>= ( const Any & rAny, sal_Int16 & value ) SAL_THROW( () )
 {
 	switch (rAny.pType->eTypeClass)
 	{
@@ -320,7 +320,7 @@
 	}
 }
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator >>= ( const Any & rAny, sal_uInt16 & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator >>= ( const Any & rAny, sal_uInt16 & value ) SAL_THROW( () )
 {
 	switch (rAny.pType->eTypeClass)
 	{
@@ -337,7 +337,7 @@
 }
 // long
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator >>= ( const Any & rAny, sal_Int32 & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator >>= ( const Any & rAny, sal_Int32 & value ) SAL_THROW( () )
 {
 	switch (rAny.pType->eTypeClass)
 	{
@@ -359,7 +359,7 @@
 	}
 }
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator >>= ( const Any & rAny, sal_uInt32 & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator >>= ( const Any & rAny, sal_uInt32 & value ) SAL_THROW( () )
 {
 	switch (rAny.pType->eTypeClass)
 	{
@@ -382,7 +382,7 @@
 }
 // hyper
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator >>= ( const Any & rAny, sal_Int64 & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator >>= ( const Any & rAny, sal_Int64 & value ) SAL_THROW( () )
 {
 	switch (rAny.pType->eTypeClass)
 	{
@@ -412,7 +412,7 @@
 	}
 }
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator >>= ( const Any & rAny, sal_uInt64 & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator >>= ( const Any & rAny, sal_uInt64 & value ) SAL_THROW( () )
 {
 	switch (rAny.pType->eTypeClass)
 	{
@@ -443,7 +443,7 @@
 }
 // float
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator >>= ( const Any & rAny, float & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator >>= ( const Any & rAny, float & value ) SAL_THROW( () )
 {
 	switch (rAny.pType->eTypeClass)
 	{
@@ -467,7 +467,7 @@
 }
 // double
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator >>= ( const Any & rAny, double & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator >>= ( const Any & rAny, double & value ) SAL_THROW( () )
 {
 	switch (rAny.pType->eTypeClass)
 	{
@@ -501,7 +501,7 @@
 }
 // string
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator >>= ( const Any & rAny, ::rtl::OUString & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator >>= ( const Any & rAny, ::rtl::OUString & value ) SAL_THROW( () )
 {
 	if (typelib_TypeClass_STRING == rAny.pType->eTypeClass)
 	{
@@ -511,14 +511,14 @@
 	return sal_False;
 }
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator == ( const Any & rAny, const ::rtl::OUString & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator == ( const Any & rAny, const ::rtl::OUString & value ) SAL_THROW( () )
 {
 	return (typelib_TypeClass_STRING == rAny.pType->eTypeClass &&
 			value.equals( * reinterpret_cast< const ::rtl::OUString * >( &rAny.pReserved ) ));
 }
 // type
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator >>= ( const Any & rAny, Type & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator >>= ( const Any & rAny, Type & value ) SAL_THROW( () )
 {
 	if (typelib_TypeClass_TYPE == rAny.pType->eTypeClass)
 	{
@@ -528,14 +528,14 @@
 	return sal_False;
 }
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator == ( const Any & rAny, const Type & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator == ( const Any & rAny, const Type & value ) SAL_THROW( () )
 {
 	return (typelib_TypeClass_TYPE == rAny.pType->eTypeClass &&
 			value.equals( * reinterpret_cast< const Type * >( &rAny.pReserved ) ));
 }
 // any
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator >>= ( const Any & rAny, Any & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator >>= ( const Any & rAny, Any & value ) SAL_THROW( () )
 {
 	if (&rAny != &value)
 	{
@@ -547,7 +547,7 @@
 }
 // interface
 //__________________________________________________________________________________________________
-inline sal_Bool SAL_CALL operator == ( const Any & rAny, const BaseReference & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator == ( const Any & rAny, const BaseReference & value ) SAL_THROW( () )
 {
 	if (typelib_TypeClass_INTERFACE == rAny.pType->eTypeClass)
 	{
@@ -559,7 +559,7 @@
 // operator to compare to an any.
 //__________________________________________________________________________________________________
 template< class C >
-inline sal_Bool SAL_CALL operator == ( const Any & rAny, const C & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator == ( const Any & rAny, const C & value ) SAL_THROW( () )
 {
 	const Type & rType = ::cppu::getTypeFavourUnsigned(&value);
 	return ::uno_type_equalData(
@@ -570,7 +570,7 @@
 // operator to compare to an any.  may use specialized operators ==.
 //__________________________________________________________________________________________________
 template< class C >
-inline sal_Bool SAL_CALL operator != ( const Any & rAny, const C & value ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator != ( const Any & rAny, const C & value ) SAL_THROW( () )
 {
 	return (! operator == ( rAny, value ));
 }
--- bridges/source/remote/urp/urp_job.hxx.orig	2006-01-16 16:33:33.848276784 +0100
+++ bridges/source/remote/urp/urp_job.hxx	2006-01-16 16:34:09.010917267 +0100
@@ -53,7 +53,7 @@
 struct urp_BridgeImpl;
 
 template < class t >	
-inline t mymax( const t &t1 , const t &t2 )
+__inline__ __attribute__((always_inline)) t mymax( const t &t1 , const t &t2 )
 {
 	return t1 > t2 ? t1 : t2;
 }
@@ -76,7 +76,7 @@
 
 	~Job();
 
-   	inline void setUnmarshal( Unmarshal *p )
+   	__inline__ __attribute__((always_inline)) void setUnmarshal( Unmarshal *p )
    		{ m_pUnmarshal = p; }
 
 public:
@@ -89,7 +89,7 @@
 class ClientJob : public Job
 {
 public:
-	inline ClientJob( uno_Environment *pEnvRemote, // weak !
+	__inline__ __attribute__((always_inline)) ClientJob( uno_Environment *pEnvRemote, // weak !
 					  struct urp_BridgeImpl *pBridgeImpl,
 					  rtl_uString *pOid,  // weak 
 					  typelib_TypeDescription * pMemberType, // weak 
@@ -102,7 +102,7 @@
 	// no release for method type and attribute type necessary, because
 	// it was acquired by the caller of urp_sendRequest. The lifetime
 	// of the ClientJob object is always shorter than the urp_sendRequest call.		
-	inline ~ClientJob()
+	__inline__ __attribute__((always_inline)) ~ClientJob()
 		{
 			if( m_bReleaseForTypeDescriptionNecessary )
 				typelib_typedescription_release( (typelib_TypeDescription*) m_pInterfaceType );
@@ -114,11 +114,11 @@
 	sal_Bool extract( );
 	void initiate();
 
-	inline void setBridgePropertyCall()
+	__inline__ __attribute__((always_inline)) void setBridgePropertyCall()
 		{ m_bBridgePropertyCall = sal_True; }
-	inline sal_Bool isBridgePropertyCall()
+	__inline__ __attribute__((always_inline)) sal_Bool isBridgePropertyCall()
 		{ return m_bBridgePropertyCall; }
-	inline sal_Bool isOneway()
+	__inline__ __attribute__((always_inline)) sal_Bool isOneway()
 		{ return m_bOneway; }
 public:
 	typelib_InterfaceMethodTypeDescription    *m_pMethodType;
@@ -186,7 +186,7 @@
 
 public:
 	// setMethodType or setAttributeType MUST be called before extract
-	inline void setMethodType(
+	__inline__ __attribute__((always_inline)) void setMethodType(
 		typelib_InterfaceMethodTypeDescription *pMethodType,
 		sal_Bool bIsReleaseCall,
 		sal_Bool bIsOneway )
@@ -198,7 +198,7 @@
 			m_aTypeInfo[m_nCalls].m_bIsOneway = bIsOneway;
 		}
 	
-	inline void setAttributeType(
+	__inline__ __attribute__((always_inline)) void setAttributeType(
 		typelib_InterfaceAttributeTypeDescription *pAttributeType, sal_Bool bIsSetter, sal_Bool bIsOneway )
 		{
 			m_aTypeInfo[m_nCalls].m_pAttributeType = pAttributeType;
@@ -208,7 +208,7 @@
 			m_aTypeInfo[m_nCalls].m_bIsOneway = bIsOneway;
 		}
 
-	inline void setType( typelib_TypeDescriptionReference *pTypeRef )
+	__inline__ __attribute__((always_inline)) void setType( typelib_TypeDescriptionReference *pTypeRef )
 		{
 			m_aEntries[m_nCalls].m_pInterfaceTypeRef = pTypeRef;
 			typelib_typedescriptionreference_acquire( m_aEntries[m_nCalls].m_pInterfaceTypeRef );
@@ -217,7 +217,7 @@
 				pTypeRef );
 		}
 	// setOid or setInterface MUST be called before extract
-  	inline void setOid(	rtl_uString *pOid )
+  	__inline__ __attribute__((always_inline)) void setOid(	rtl_uString *pOid )
 		{
 			m_aEntries[m_nCalls].m_pOid = pOid;
 			rtl_uString_acquire( m_aEntries[m_nCalls].m_pOid );
@@ -225,22 +225,22 @@
 		}
 		
 	// setOid or setInterface MUST be called
-	inline void setInterface( remote_Interface *pRemoteI )
+	__inline__ __attribute__((always_inline)) void setInterface( remote_Interface *pRemoteI )
 		{
 			m_aEntries[m_nCalls].m_pRemoteI = pRemoteI;
 			pRemoteI->acquire( pRemoteI );
 			m_aEntries[m_nCalls].m_pOid = 0;
 		}
 
-	inline void setIgnoreCache( sal_Bool bIgnoreCache )
+	__inline__ __attribute__((always_inline)) void setIgnoreCache( sal_Bool bIgnoreCache )
 		{
 			m_aEntries[m_nCalls].m_bIgnoreCache = bIgnoreCache;
 		}
 
-	inline sal_Bool isFull()
+	__inline__ __attribute__((always_inline)) sal_Bool isFull()
 		{ return m_nCalls >= m_nMaxMessages; }
 
-	inline sal_Int8 *getHeap( sal_Int32 nSizeToAlloc )
+	__inline__ __attribute__((always_inline)) sal_Int8 *getHeap( sal_Int32 nSizeToAlloc )
 		{
 			if( nSizeToAlloc + m_nCurrentMemPosition > m_nCurrentMemSize )
 			{
@@ -281,7 +281,7 @@
 
 
 //---------------------------------------------------------------------------------------------
-inline ClientJob::ClientJob(
+__inline__ __attribute__((always_inline)) ClientJob::ClientJob(
 	uno_Environment *pEnvRemote,
 	struct urp_BridgeImpl *pBridgeImpl,
 	rtl_uString *pOid,
--- bridges/source/remote/urp/urp_marshal.hxx.orig	2005-09-08 00:47:30.000000000 +0200
+++ bridges/source/remote/urp/urp_marshal.hxx	2006-01-16 16:40:50.035580740 +0100
@@ -64,7 +64,7 @@
 namespace bridges_urp
 {
 	// methods for accessing marshaling buffer
-	inline void Marshal::finish( sal_Int32 nMessageCount )
+	__inline__ __attribute__((always_inline)) void Marshal::finish( sal_Int32 nMessageCount )
 	{
 		sal_Int32 nSize = getSize() - 2*sizeof( sal_Int32 ); 
 
@@ -73,27 +79,27 @@
 		m_pos = pos;
 	}
 	
-	inline void Marshal::restart()
+	__inline__ __attribute__((always_inline)) void Marshal::restart()
 	{
 		m_pos = m_base + 2*sizeof( sal_Int32 );
 	}
 
-	inline sal_Int8 *Marshal::getBuffer()
+	__inline__ __attribute__((always_inline)) sal_Int8 *Marshal::getBuffer()
 	{
 		return m_base;
 	}
 	
-	inline sal_Bool Marshal::empty() const
+	__inline__ __attribute__((always_inline)) sal_Bool Marshal::empty() const
 	{
 		return ( m_pos - m_base ) == 2*sizeof( sal_Int32 );
 	}
 
-	inline sal_Int32 Marshal::getSize()
+	__inline__ __attribute__((always_inline)) sal_Int32 Marshal::getSize()
 	{
 		return ((sal_Int32) (m_pos - m_base));
 	}
 	
-	inline void Marshal::ensureAdditionalMem( sal_Int32 nMemToAdd )
+	__inline__ __attribute__((always_inline)) void Marshal::ensureAdditionalMem( sal_Int32 nMemToAdd )
 	{
 		sal_Int32 nDiff = m_pos - m_base;
 		if( nDiff + nMemToAdd > m_nBufferSize )
@@ -108,14 +114,14 @@
 	}
 
 	// marshaling methods
-	inline void Marshal::packInt8( void *pSource )
+	__inline__ __attribute__((always_inline)) void Marshal::packInt8( void *pSource )
 	{
 		ensureAdditionalMem( 1 );
 		*m_pos = *((sal_Int8*) pSource );
 		m_pos++;
 	}
 
-	inline void Marshal::packInt16( void *pSource )
+	__inline__ __attribute__((always_inline)) void Marshal::packInt16( void *pSource )
 	{
 		ensureAdditionalMem( 2 );
 		if( isSystemLittleEndian() )
@@ -131,7 +137,7 @@
 		m_pos +=2;
 	}
 
-	inline void Marshal::packByteSequence( sal_Int8 *pData , sal_Int32 nLength )
+	__inline__ __attribute__((always_inline)) void Marshal::packByteSequence( sal_Int8 *pData , sal_Int32 nLength )
 	{
 		packCompressedSize( nLength );
 		
@@ -140,7 +146,7 @@
 		m_pos += nLength;
 	}
 	
-	inline void Marshal::packString( void *pSource )
+	__inline__ __attribute__((always_inline)) void Marshal::packString( void *pSource )
 	{
 		rtl_uString *p = *( rtl_uString ** ) pSource;
 
@@ -156,7 +162,7 @@
 		m_pos += nLength;
 	}
 
-	inline sal_Bool Marshal::packAny( void *pSource )
+	__inline__ __attribute__((always_inline)) sal_Bool Marshal::packAny( void *pSource )
 	{
 		sal_Bool bSuccess = sal_True;
 		uno_Any *pAny = (uno_Any * ) pSource;
@@ -182,7 +188,7 @@
 		return bSuccess;
 	}
 
-	inline void Marshal::packInt32( void *pSource )
+	__inline__ __attribute__((always_inline)) void Marshal::packInt32( void *pSource )
 	{
 		ensureAdditionalMem( 4 );
 		if( isSystemLittleEndian() )
@@ -201,7 +207,7 @@
 		m_pos +=4;
 	}
 
-	inline void Marshal::packCompressedSize( sal_Int32 nSize )
+	__inline__ __attribute__((always_inline)) void Marshal::packCompressedSize( sal_Int32 nSize )
 	{
 		ensureAdditionalMem( 5 );
 
--- bridges/source/remote/urp/urp_marshal_decl.hxx.orig	2006-01-16 16:43:26.103479464 +0100
+++ bridges/source/remote/urp/urp_marshal_decl.hxx	2006-01-16 16:43:40.034167817 +0100
@@ -66,44 +66,44 @@
 		void packOid( const ::rtl::OUString &oid );
 		void packType( void *pSource );
 
-		inline void packCompressedSize( sal_Int32 nSize );
-		inline void packInt8( void *pSource );
-		inline void packInt16( void *pSource );
-		inline void packInt32( void *pSource );
-		inline void packString( void *pSource );
-		inline sal_Bool packAny( void *pSource );
-		inline void packByteSequence( sal_Int8 *pBuffer , sal_Int32 nSize );
+		__inline__ __attribute__((always_inline)) void packCompressedSize( sal_Int32 nSize );
+		__inline__ __attribute__((always_inline)) void packInt8( void *pSource );
+		__inline__ __attribute__((always_inline)) void packInt16( void *pSource );
+		__inline__ __attribute__((always_inline)) void packInt32( void *pSource );
+		__inline__ __attribute__((always_inline)) void packString( void *pSource );
+		__inline__ __attribute__((always_inline)) sal_Bool packAny( void *pSource );
+		__inline__ __attribute__((always_inline)) void packByteSequence( sal_Int8 *pBuffer , sal_Int32 nSize );
 
 		// can be called during marshaling, but not between
 		// finish and restart
 		// returns true, when nothing has been marshaled
-		inline sal_Bool empty() const;
+		__inline__ __attribute__((always_inline)) sal_Bool empty() const;
 
 		// stops marshaling, inserts size in front of the buffer
 		// getStart and getSize can now be called
-		inline void finish( sal_Int32 nMessageCount );
+		__inline__ __attribute__((always_inline)) void finish( sal_Int32 nMessageCount );
 
 		// must be called after finish. After calling restart,
 		// a new marshalling session is started invalidating
 		// the previous bufer
-		inline void restart();
+		__inline__ __attribute__((always_inline)) void restart();
 		
 		// is only valid, after finish has been called.
 		// valid until destructed.
-		inline sal_Int8 *getBuffer();
+		__inline__ __attribute__((always_inline)) sal_Int8 *getBuffer();
 		
 		// is only valid, after finish has been called.
 		// valid until destructed.
-		inline sal_Int32 getSize();
+		__inline__ __attribute__((always_inline)) sal_Int32 getSize();
 		
-		inline sal_Int32 getPos()
+		__inline__ __attribute__((always_inline)) sal_Int32 getPos()
 			{ return m_pos - m_base; }
 	
-		inline sal_Bool isSystemLittleEndian()
+		__inline__ __attribute__((always_inline)) sal_Bool isSystemLittleEndian()
 			{ return g_bMarshalSystemIsLittleEndian; }
 		
 	private:
-		inline void ensureAdditionalMem( sal_Int32 nMemToAdd );
+		__inline__ __attribute__((always_inline)) void ensureAdditionalMem( sal_Int32 nMemToAdd );
 		sal_Int32 m_nBufferSize;
 		sal_Int8 *m_base;		
 		sal_Int8 *m_pos;
--- cppu/inc/typelib/typedescription.hxx.orig	2006-01-16 16:51:30.548333739 +0100
+++ cppu/inc/typelib/typedescription.hxx	2006-01-16 16:51:53.073980809 +0100
@@ -72,64 +72,64 @@
 public:
 	// these are here to force memory de/allocation to sal lib.
     /** @internal */
-	inline static void * SAL_CALL operator new ( size_t nSize ) SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) static void * SAL_CALL operator new ( size_t nSize ) SAL_THROW( () )
 		{ return ::rtl_allocateMemory( nSize ); }
     /** @internal */
-	inline static void SAL_CALL operator delete ( void * pMem ) SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) static void SAL_CALL operator delete ( void * pMem ) SAL_THROW( () )
 		{ ::rtl_freeMemory( pMem ); }
     /** @internal */
-	inline static void * SAL_CALL operator new ( size_t, void * pMem ) SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) static void * SAL_CALL operator new ( size_t, void * pMem ) SAL_THROW( () )
 		{ return pMem; }
     /** @internal */
-	inline static void SAL_CALL operator delete ( void *, void * ) SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) static void SAL_CALL operator delete ( void *, void * ) SAL_THROW( () )
 		{}
     
 	/** Constructor:
         
 		@param pTypeDescr a type description
 	*/
-	inline TypeDescription( typelib_TypeDescription * pTypeDescr = 0 ) SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) TypeDescription( typelib_TypeDescription * pTypeDescr = 0 ) SAL_THROW( () );
 	/** Constructor:
         
 		@param pTypeDescrRef a type description reference
 	*/
-	inline TypeDescription( typelib_TypeDescriptionReference * pTypeDescrRef ) SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) TypeDescription( typelib_TypeDescriptionReference * pTypeDescrRef ) SAL_THROW( () );
 	/** Constructor:
         
 		@param rType a type
 	*/
-	inline TypeDescription( const ::com::sun::star::uno::Type & rType ) SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) TypeDescription( const ::com::sun::star::uno::Type & rType ) SAL_THROW( () );
 	/** Copy constructor:
         
 		@param rDescr another TypeDescription
 	*/
-	inline TypeDescription( const TypeDescription & rDescr ) SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) TypeDescription( const TypeDescription & rDescr ) SAL_THROW( () );
 	/** Constructor:
         
 		@param pTypeName a type name
 	*/
-	inline TypeDescription( rtl_uString * pTypeName ) SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) TypeDescription( rtl_uString * pTypeName ) SAL_THROW( () );
 	/** Constructor:
         
 		@param rTypeName a type name
 	*/
-	inline TypeDescription( const ::rtl::OUString & rTypeName ) SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) TypeDescription( const ::rtl::OUString & rTypeName ) SAL_THROW( () );
 	/** Destructor: releases type description
 	*/
-	inline ~TypeDescription() SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) ~TypeDescription() SAL_THROW( () );
 
 	/** Assignment operator: acquires given type description and releases a set one.
         
 		@param pTypeDescr another type description
 		@return this TypeDescription
 	*/
-	inline TypeDescription & SAL_CALL operator = ( typelib_TypeDescription * pTypeDescr ) SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) TypeDescription & SAL_CALL operator = ( typelib_TypeDescription * pTypeDescr ) SAL_THROW( () );
 	/** Assignment operator: acquires given type description and releases a set one.
         
 		@param rTypeDescr another type description
 		@return this TypeDescription
 	*/
-	inline TypeDescription & SAL_CALL operator =( const TypeDescription & rTypeDescr ) SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) TypeDescription & SAL_CALL operator =( const TypeDescription & rTypeDescr ) SAL_THROW( () )
 		{ return this->operator =( rTypeDescr.get() ); }
 
 	/** Tests whether two type descriptions are equal.
@@ -137,80 +137,80 @@
 		@param pTypeDescr another type description
 		@return true, if both type descriptions are equal, false otherwise
 	*/
-	inline sal_Bool SAL_CALL equals( const typelib_TypeDescription * pTypeDescr ) const SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL equals( const typelib_TypeDescription * pTypeDescr ) const SAL_THROW( () );
 	/** Tests whether two type descriptions are equal.
         
 		@param rTypeDescr another type description
 		@return true, if both type descriptions are equal, false otherwise
 	*/
-	inline sal_Bool SAL_CALL equals( const TypeDescription & rTypeDescr ) const SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL equals( const TypeDescription & rTypeDescr ) const SAL_THROW( () )
 		{ return equals( rTypeDescr._pTypeDescr ); }
 
 	/** Makes stored type description complete.
 	*/
-	inline void SAL_CALL makeComplete() const SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) void SAL_CALL makeComplete() const SAL_THROW( () );
 	
 	/** Gets the UNacquired type description pointer.
         
 		@return stored pointer of type description
 	*/
-	inline typelib_TypeDescription * SAL_CALL get() const SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) typelib_TypeDescription * SAL_CALL get() const SAL_THROW( () )
 		{ return _pTypeDescr; }
 	/** Tests if a type description is set.
         
 		@return true, if a type description is set, false otherwise
 	*/
-	inline sal_Bool SAL_CALL is() const SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL is() const SAL_THROW( () )
 		{ return (_pTypeDescr != 0); }
 };
 //__________________________________________________________________________________________________
-inline TypeDescription::TypeDescription( typelib_TypeDescription * pTypeDescr ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) TypeDescription::TypeDescription( typelib_TypeDescription * pTypeDescr ) SAL_THROW( () )
 	: _pTypeDescr( pTypeDescr )
 {
 	if (_pTypeDescr)
 		typelib_typedescription_acquire( _pTypeDescr );
 }
 //__________________________________________________________________________________________________
-inline TypeDescription::TypeDescription( typelib_TypeDescriptionReference * pTypeDescrRef ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) TypeDescription::TypeDescription( typelib_TypeDescriptionReference * pTypeDescrRef ) SAL_THROW( () )
 	: _pTypeDescr( 0 )
 {
 	if (pTypeDescrRef)
 		typelib_typedescriptionreference_getDescription( &_pTypeDescr, pTypeDescrRef );
 }
 //__________________________________________________________________________________________________
-inline TypeDescription::TypeDescription( const ::com::sun::star::uno::Type & rType ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) TypeDescription::TypeDescription( const ::com::sun::star::uno::Type & rType ) SAL_THROW( () )
 	: _pTypeDescr( 0 )
 {
 	if (rType.getTypeLibType())
 		typelib_typedescriptionreference_getDescription( &_pTypeDescr, rType.getTypeLibType() );
 }
 //__________________________________________________________________________________________________
-inline TypeDescription::TypeDescription( const TypeDescription & rTypeDescr ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) TypeDescription::TypeDescription( const TypeDescription & rTypeDescr ) SAL_THROW( () )
 	: _pTypeDescr( rTypeDescr._pTypeDescr )
 {
 	if (_pTypeDescr)
 		typelib_typedescription_acquire( _pTypeDescr );
 }
 //__________________________________________________________________________________________________
-inline TypeDescription::TypeDescription( rtl_uString * pTypeName ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) TypeDescription::TypeDescription( rtl_uString * pTypeName ) SAL_THROW( () )
 	: _pTypeDescr( 0 )
 {
 	typelib_typedescription_getByName( &_pTypeDescr , pTypeName );
 }
 //__________________________________________________________________________________________________
-inline TypeDescription::TypeDescription( const ::rtl::OUString & rTypeName ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) TypeDescription::TypeDescription( const ::rtl::OUString & rTypeName ) SAL_THROW( () )
 	: _pTypeDescr( 0 )
 {
 	typelib_typedescription_getByName( &_pTypeDescr , rTypeName.pData );
 }
 //__________________________________________________________________________________________________
-inline TypeDescription::~TypeDescription() SAL_THROW( () )
+__inline__ __attribute__((always_inline)) TypeDescription::~TypeDescription() SAL_THROW( () )
 {
 	if (_pTypeDescr)
 		typelib_typedescription_release( _pTypeDescr );
 }
 //__________________________________________________________________________________________________
-inline TypeDescription & TypeDescription::operator = ( typelib_TypeDescription * pTypeDescr ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) TypeDescription & TypeDescription::operator = ( typelib_TypeDescription * pTypeDescr ) SAL_THROW( () )
 {
 	if (pTypeDescr)
 		typelib_typedescription_acquire( pTypeDescr );
@@ -220,13 +220,13 @@
 	return *this;
 }
 //__________________________________________________________________________________________________
-inline sal_Bool TypeDescription::equals( const typelib_TypeDescription * pTypeDescr ) const SAL_THROW( () )
+__inline__ __attribute__((always_inline)) sal_Bool TypeDescription::equals( const typelib_TypeDescription * pTypeDescr ) const SAL_THROW( () )
 {
 	return (_pTypeDescr && pTypeDescr &&
 			typelib_typedescription_equals( _pTypeDescr, pTypeDescr ));
 }
 //__________________________________________________________________________________________________
-inline void TypeDescription::makeComplete() const SAL_THROW( () )
+__inline__ __attribute__((always_inline)) void TypeDescription::makeComplete() const SAL_THROW( () )
 {
 	if (_pTypeDescr && !_pTypeDescr->bComplete)
 		::typelib_typedescription_complete( &_pTypeDescr );
--- cppu/inc/com/sun/star/uno/Type.hxx.orig	2006-01-16 16:58:37.892781115 +0100
+++ cppu/inc/com/sun/star/uno/Type.hxx	2006-01-16 16:59:01.552158800 +0100
@@ -56,53 +56,53 @@
 {
 
 //__________________________________________________________________________________________________
-inline Type::Type() SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Type::Type() SAL_THROW( () )
 {
     _pType = reinterpret_cast< const ::com::sun::star::uno::Type * >(
         ::typelib_static_type_getByTypeClass( typelib_TypeClass_VOID ) )->getTypeLibType();
     ::typelib_typedescriptionreference_acquire( _pType );
 }
 //__________________________________________________________________________________________________
-inline Type::Type( TypeClass eTypeClass, const ::rtl::OUString & rTypeName ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Type::Type( TypeClass eTypeClass, const ::rtl::OUString & rTypeName ) SAL_THROW( () )
     : _pType( 0 )
 {
     ::typelib_typedescriptionreference_new( &_pType, (typelib_TypeClass)eTypeClass, rTypeName.pData );
 }
 //__________________________________________________________________________________________________
-inline Type::Type( TypeClass eTypeClass, const sal_Char * pTypeName ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Type::Type( TypeClass eTypeClass, const sal_Char * pTypeName ) SAL_THROW( () )
     : _pType( 0 )
 {
     ::typelib_typedescriptionreference_newByAsciiName( &_pType, (typelib_TypeClass)eTypeClass, pTypeName );
 }
 //__________________________________________________________________________________________________
-inline Type::Type( typelib_TypeDescriptionReference * pType ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Type::Type( typelib_TypeDescriptionReference * pType ) SAL_THROW( () )
     : _pType( pType )
 {
     ::typelib_typedescriptionreference_acquire( _pType );
 }
 //__________________________________________________________________________________________________
-inline Type::Type( typelib_TypeDescriptionReference * pType, UnoType_NoAcquire ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Type::Type( typelib_TypeDescriptionReference * pType, UnoType_NoAcquire ) SAL_THROW( () )
     : _pType( pType )
 {
 }
 //__________________________________________________________________________________________________
-inline Type::Type( typelib_TypeDescriptionReference * pType, __sal_NoAcquire ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Type::Type( typelib_TypeDescriptionReference * pType, __sal_NoAcquire ) SAL_THROW( () )
     : _pType( pType )
 {
 }
 //__________________________________________________________________________________________________
-inline Type::Type( const Type & rType ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Type::Type( const Type & rType ) SAL_THROW( () )
     : _pType( rType._pType )
 {
     ::typelib_typedescriptionreference_acquire( _pType );
 }
 //__________________________________________________________________________________________________
-inline ::rtl::OUString Type::getTypeName() const SAL_THROW( () )
+__inline__ __attribute__((always_inline)) ::rtl::OUString Type::getTypeName() const SAL_THROW( () )
 {
     return ::rtl::OUString( _pType->pTypeName );
 }
 //__________________________________________________________________________________________________
-inline Type & Type::operator = ( const Type & rType ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) Type & Type::operator = ( const Type & rType ) SAL_THROW( () )
 {
     ::typelib_typedescriptionreference_assign( &_pType, rType._pType );
     return *this;
@@ -117,100 +117,100 @@
 }
 }
 
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const ::com::sun::star::uno::Type * ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const ::com::sun::star::uno::Type * ) SAL_THROW( () )
 {
     return ::cppu::UnoType< ::com::sun::star::uno::Type >::get();
 }
 
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuVoidType() SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuVoidType() SAL_THROW( () )
 {
     return ::cppu::UnoType< ::cppu::UnoVoidType >::get();
 }
-inline const ::com::sun::star::uno::Type & SAL_CALL getVoidCppuType() SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getVoidCppuType() SAL_THROW( () )
 {
     return ::cppu::UnoType< ::cppu::UnoVoidType >::get();
 }
 
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuBooleanType() SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuBooleanType() SAL_THROW( () )
 {
     return ::cppu::UnoType< bool >::get();
 }
-inline const ::com::sun::star::uno::Type & SAL_CALL getBooleanCppuType() SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getBooleanCppuType() SAL_THROW( () )
 {
     return ::cppu::UnoType< bool >::get();
 }
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Bool * ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Bool * ) SAL_THROW( () )
 {
     return ::cppu::UnoType< bool >::get();
 }
 
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType(
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType(
     bool const * ) SAL_THROW( () )
 {
     return ::cppu::UnoType< bool >::get();
 }
 
-inline const ::com::sun::star::uno::Type & SAL_CALL getCharCppuType() SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCharCppuType() SAL_THROW( () )
 {
     return ::cppu::UnoType< ::cppu::UnoCharType >::get();
 }
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuCharType() SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuCharType() SAL_THROW( () )
 {
     return ::cppu::UnoType< ::cppu::UnoCharType >::get();
 }
 
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int8 * ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int8 * ) SAL_THROW( () )
 {
     return ::cppu::UnoType< ::sal_Int8 >::get();
 }
 
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const ::rtl::OUString * ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const ::rtl::OUString * ) SAL_THROW( () )
 {
     return ::cppu::UnoType< ::rtl::OUString >::get();
 }
 
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int16 * ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int16 * ) SAL_THROW( () )
 {
     return ::cppu::UnoType< ::sal_Int16 >::get();
 }
 
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_uInt16 * ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_uInt16 * ) SAL_THROW( () )
 {
     return ::cppu::UnoType< ::cppu::UnoUnsignedShortType >::get();
 }
 
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int32 * ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int32 * ) SAL_THROW( () )
 {
     return ::cppu::UnoType< ::sal_Int32 >::get();
 }
 
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_uInt32 * ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_uInt32 * ) SAL_THROW( () )
 {
     return ::cppu::UnoType< ::sal_uInt32 >::get();
 }
 
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int64 * ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int64 * ) SAL_THROW( () )
 {
     return ::cppu::UnoType< ::sal_Int64 >::get();
 }
 
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_uInt64 * ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_uInt64 * ) SAL_THROW( () )
 {
     return ::cppu::UnoType< ::sal_uInt64 >::get();
 }
 
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const float * ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const float * ) SAL_THROW( () )
 {
     return ::cppu::UnoType< float >::get();
 }
 
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const double * ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const double * ) SAL_THROW( () )
 {
     return ::cppu::UnoType< double >::get();
 }
 
 template< class T >
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType1( T * pT ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType1( T * pT ) SAL_THROW( () )
 {
 	if (! ::com::sun::star::uno::Array< T >::s_pType)
 	{
@@ -227,7 +227,7 @@
 }
 
 template< class T >
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType2( T * pT ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType2( T * pT ) SAL_THROW( () )
 {
 	if (! ::com::sun::star::uno::Array< T >::s_pType)
 	{
@@ -245,7 +245,7 @@
 }
 
 template< class T >
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType3( T * pT ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType3( T * pT ) SAL_THROW( () )
 {
 	if (! ::com::sun::star::uno::Array< T >::s_pType)
 	{
@@ -264,7 +264,7 @@
 }
 
 template< class T >
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType4( T * pT ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType4( T * pT ) SAL_THROW( () )
 {
 	if (! ::com::sun::star::uno::Array< T >::s_pType)
 	{
@@ -284,7 +284,7 @@
 }
 
 template< class T >
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType5( T * pT ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType5( T * pT ) SAL_THROW( () )
 {
 	if (! ::com::sun::star::uno::Array< T >::s_pType)
 	{
@@ -305,7 +305,7 @@
 }
 
 template< class T >
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType6( T * pT ) SAL_THROW( () )
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType6( T * pT ) SAL_THROW( () )
 {
 	if (! ::com::sun::star::uno::Array< T >::s_pType)
 	{
@@ -327,13 +327,13 @@
 }
 
 template< typename T >
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType() SAL_THROW(())
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType() SAL_THROW(())
 {
     return ::cppu::UnoType< T >::get();
 }
 
 template<>
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType< sal_Unicode >()
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType< sal_Unicode >()
     SAL_THROW(())
 {
     return ::cppu::UnoType< ::cppu::UnoCharType >::get();
--- cppu/inc/com/sun/star/uno/Type.h.orig	2006-01-16 10:56:09.000000000 +0100
+++ cppu/inc/com/sun/star/uno/Type.h	2006-01-16 17:13:06.603807255 +0100
@@ -89,41 +89,41 @@
 public:
 	// these are here to force memory de/allocation to sal lib.
     /** @internal */
-	inline static void * SAL_CALL operator new ( size_t nSize ) SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) static void * SAL_CALL operator new ( size_t nSize ) SAL_THROW( () )
 		{ return ::rtl_allocateMemory( nSize ); }
     /** @internal */
-	inline static void SAL_CALL operator delete ( void * pMem ) SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) static void SAL_CALL operator delete ( void * pMem ) SAL_THROW( () )
 		{ ::rtl_freeMemory( pMem ); }
     /** @internal */
-	inline static void * SAL_CALL operator new ( size_t, void * pMem ) SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) static void * SAL_CALL operator new ( size_t, void * pMem ) SAL_THROW( () )
 		{ return pMem; }
     /** @internal */
-	inline static void SAL_CALL operator delete ( void *, void * ) SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) static void SAL_CALL operator delete ( void *, void * ) SAL_THROW( () )
 		{}
 	
 	/** Default Constructor: Type is set to void.
 	*/
-	inline Type() SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) Type() SAL_THROW( () );
 	
 	/** Constructor: Type is constructed by given name and type class.
         
 		@param eTypeClass type class of type
 		@param rTypeName name of type
 	*/
-	inline Type( TypeClass eTypeClass, const ::rtl::OUString & rTypeName ) SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) Type( TypeClass eTypeClass, const ::rtl::OUString & rTypeName ) SAL_THROW( () );
 	
 	/** Constructor: Type is constructed by given name and type class.
         
 		@param eTypeClass type class of type
 		@param pTypeName name of type
 	*/
-	inline Type( TypeClass eTypeClass, const sal_Char * pTypeName ) SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) Type( TypeClass eTypeClass, const sal_Char * pTypeName ) SAL_THROW( () );
 	
 	/** Constructor: Type is (copy) constructed by given C type description reference.
         
 		@param pType C type description reference
 	*/
-	inline Type( typelib_TypeDescriptionReference * pType ) SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) Type( typelib_TypeDescriptionReference * pType ) SAL_THROW( () );
 	
 	/** Constructor: Type is (copy) constructed by given C type description reference
         without acquiring it.
@@ -131,24 +131,24 @@
 		@param pType C type description reference
 		@param dummy UNO_TYPE_NO_ACQUIRE to force obvious distinction to other constructors
 	*/
-	inline Type( typelib_TypeDescriptionReference * pType, UnoType_NoAcquire ) SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) Type( typelib_TypeDescriptionReference * pType, UnoType_NoAcquire ) SAL_THROW( () );
 	/** Constructor: Type is (copy) constructed by given C type description reference
         without acquiring it.
         
 		@param pType C type description reference
 		@param dummy SAL_NO_ACQUIRE to force obvious distinction to other constructors
 	*/
-	inline Type( typelib_TypeDescriptionReference * pType, __sal_NoAcquire ) SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) Type( typelib_TypeDescriptionReference * pType, __sal_NoAcquire ) SAL_THROW( () );
 	
     /** Copy constructor: Type is copy constructed by given type.
         
 		@param rType another type
 	*/
-    inline Type( const Type & rType ) SAL_THROW( () );
+    __inline__ __attribute__((always_inline)) Type( const Type & rType ) SAL_THROW( () );
 	
 	/** Destructor: Releases acquired C type description reference.
 	*/
-    inline ~Type() SAL_THROW( () )
+    __inline__ __attribute__((always_inline)) ~Type() SAL_THROW( () )
 		{ ::typelib_typedescriptionreference_release( _pType ); }
 	
 	/** Assignment operator: Acquires right side type and releases previously set type.
@@ -156,33 +156,33 @@
 		@param rType another type (right side)
 		@return this type
 	*/
-	inline Type & SAL_CALL operator = ( const Type & rType ) SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) Type & SAL_CALL operator = ( const Type & rType ) SAL_THROW( () );
 	
 	/** Gets the type class of set type.
         
 		@return type class of set type
 	*/
-	inline TypeClass SAL_CALL getTypeClass() const SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) TypeClass SAL_CALL getTypeClass() const SAL_THROW( () )
 		{ return (TypeClass)_pType->eTypeClass; }
 	
 	/** Gets the name of the set type.
         
 		@return name of the set type
 	*/
-	inline ::rtl::OUString SAL_CALL getTypeName() const SAL_THROW( () );
+	__inline__ __attribute__((always_inline)) ::rtl::OUString SAL_CALL getTypeName() const SAL_THROW( () );
 	
 	/** Obtains a full type description of set type.
         
 		@param ppDescr [inout] type description
 	*/
-	inline void SAL_CALL getDescription( typelib_TypeDescription ** ppDescr ) const SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) void SAL_CALL getDescription( typelib_TypeDescription ** ppDescr ) const SAL_THROW( () )
 		{ ::typelib_typedescriptionreference_getDescription( ppDescr, _pType ); }
 	
 	/** Gets the C typelib type description reference pointer. Does not acquire the reference!
         
 		@return UNacquired type description reference
 	*/
-	inline typelib_TypeDescriptionReference * SAL_CALL getTypeLibType() const SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) typelib_TypeDescriptionReference * SAL_CALL getTypeLibType() const SAL_THROW( () )
 		{ return _pType; }
 	
     /** Tests if values of this reflected type can be assigned by values of given type.
@@ -193,7 +193,7 @@
 		@return true if values of this type can be assigned from values of given type,
                 false otherwise
 	*/
-	inline sal_Bool SAL_CALL isAssignableFrom( const Type & rType ) const SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL isAssignableFrom( const Type & rType ) const SAL_THROW( () )
 		{ return ::typelib_typedescriptionreference_isAssignableFrom( _pType, rType._pType ); }
     
 	/** Compares two types.
@@ -201,21 +201,21 @@
 		@param rType another type
 		@return true if both types refer the same type, false otherwise
 	*/
-	inline sal_Bool SAL_CALL equals( const Type & rType ) const SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL equals( const Type & rType ) const SAL_THROW( () )
 		{ return ::typelib_typedescriptionreference_equals( _pType, rType._pType ); }
 	/** Equality operator: Compares two types.
         
 		@param rType another type
 		@return true if both types refer the same type, false otherwise
 	*/
-	inline sal_Bool SAL_CALL operator == ( const Type & rType ) const SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator == ( const Type & rType ) const SAL_THROW( () )
 		{ return ::typelib_typedescriptionreference_equals( _pType, rType._pType ); }
 	/** Unequality operator: Compares two types.
         
 		@param rType another type
 		@return false if both types refer the same type, true otherwise
 	*/
-	inline sal_Bool SAL_CALL operator != ( const Type & rType ) const SAL_THROW( () )
+	__inline__ __attribute__((always_inline)) sal_Bool SAL_CALL operator != ( const Type & rType ) const SAL_THROW( () )
 		{ return (! ::typelib_typedescriptionreference_equals( _pType, rType._pType )); }
 };
 
@@ -241,28 +241,28 @@
 	@param dummy typed pointer for function signature
 	@return type of IDL type "type"
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const ::com::sun::star::uno::Type * ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const ::com::sun::star::uno::Type * ) SAL_THROW( () );
 
 /** Gets the meta type of IDL type void.
 	@return type of IDL type void
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuVoidType() SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuVoidType() SAL_THROW( () );
 /** Gets the meta type of IDL type void.
     
 	@return type of IDL type void
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getVoidCppuType() SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getVoidCppuType() SAL_THROW( () );
 
 /** Gets the meta type of IDL type boolean.
     
 	@return type of IDL type boolean
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuBooleanType() SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuBooleanType() SAL_THROW( () );
 /** Gets the meta type of IDL type boolean.
     
 	@return type of IDL type boolean
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getBooleanCppuType() SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getBooleanCppuType() SAL_THROW( () );
 /** Gets the meta type of IDL type boolean.
     
     There are cases (involving templates) where uses of getCppuType are known to
@@ -271,7 +271,7 @@
 	@param dummy typed pointer for function signature
 	@return type of IDL type boolean
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Bool * ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Bool * ) SAL_THROW( () );
 /** Gets the meta type of IDL type boolean.
     
     There are cases (involving templates) where uses of getCppuType are known to
@@ -280,19 +280,19 @@
 	@param dummy typed pointer for function signature
 	@return type of IDL type boolean
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType(
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType(
     bool const * ) SAL_THROW( () );
 
 /** Gets the meta type of IDL type char.
     
 	@return type of IDL type char
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCharCppuType() SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCharCppuType() SAL_THROW( () );
 /** Gets the meta type of IDL type char.
     
 	@return type of IDL type char
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuCharType() SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuCharType() SAL_THROW( () );
 
 /** Gets the meta type of IDL type byte.
     
@@ -302,7 +302,7 @@
 	@param dummy typed pointer for function signature
 	@return type of IDL type byte
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int8 * ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int8 * ) SAL_THROW( () );
 
 /** Gets the meta type of IDL type string.
     
@@ -312,7 +312,7 @@
 	@param dummy typed pointer for function signature
 	@return type of IDL type string
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const ::rtl::OUString * ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const ::rtl::OUString * ) SAL_THROW( () );
 
 /** Gets the meta type of IDL type short.
     
@@ -322,7 +322,7 @@
 	@param dummy typed pointer for function signature
 	@return type of IDL type short
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int16 * ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int16 * ) SAL_THROW( () );
 
 /** Gets the meta type of IDL type unsigned short.
     
@@ -332,7 +332,7 @@
 	@param dummy typed pointer for function signature
 	@return type of IDL type unsigned short
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_uInt16 * ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_uInt16 * ) SAL_THROW( () );
 
 /** Gets the meta type of IDL type long.
     
@@ -342,7 +342,7 @@
 	@param dummy typed pointer for function signature
 	@return type of IDL type long
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int32 * ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int32 * ) SAL_THROW( () );
 
 /** Gets the meta type of IDL type unsigned long.
     
@@ -352,7 +352,7 @@
 	@param dummy typed pointer for function signature
 	@return type of IDL type unsigned long
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_uInt32 * ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_uInt32 * ) SAL_THROW( () );
 
 /** Gets the meta type of IDL type hyper.
     
@@ -362,7 +362,7 @@
 	@param dummy typed pointer for function signature
 	@return type of IDL type hyper
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int64 * ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_Int64 * ) SAL_THROW( () );
 
 /** Gets the meta type of IDL type unsigned hyper.
     
@@ -372,7 +372,7 @@
 	@param dummy typed pointer for function signature
 	@return type of IDL type unsigned hyper
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_uInt64 * ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const sal_uInt64 * ) SAL_THROW( () );
 
 /** Gets the meta type of IDL type float.
     
@@ -382,7 +382,7 @@
 	@param dummy typed pointer for function signature
 	@return type of IDL type float
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const float * ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const float * ) SAL_THROW( () );
 
 /** Gets the meta type of IDL type double.
     
@@ -392,7 +392,7 @@
 	@param dummy typed pointer for function signature
 	@return type of IDL type double
 */
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const double * ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuType( const double * ) SAL_THROW( () );
 
 /** Array template function to get meta type for one-dimensional arrays.
     
@@ -400,42 +400,42 @@
 	@return type of array
 */
 template< class T >
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType1( T * pT ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType1( T * pT ) SAL_THROW( () );
 /** Array template function to get meta type for two-dimensional arrays.
     
     @param pT array pointer
     @return type of array
 */
 template< class T >
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType2( T * pT ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType2( T * pT ) SAL_THROW( () );
 /** Array template function to get meta type for three-dimensional arrays.
     
     @param pT array pointer
     @return type of array
 */
 template< class T >
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType3( T * pT ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType3( T * pT ) SAL_THROW( () );
 /** Array template function to get meta type for four-dimensional arrays.
     
     @param pT array pointer
     @return type of array
 */
 template< class T >
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType4( T * pT ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType4( T * pT ) SAL_THROW( () );
 /** Array template function to get meta type for five-dimensional arrays.
     
     @param pT array pointer
     @return type of array
 */
 template< class T >
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType5( T * pT ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType5( T * pT ) SAL_THROW( () );
 /** Array template function to get meta type for six-dimensional arrays.
     
     @param pT array pointer
 	@return type of array
 */
 template< class T >
-inline const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType6( T * pT ) SAL_THROW( () );
+__inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL getCppuArrayType6( T * pT ) SAL_THROW( () );
 
 /** Gets the meta type of an IDL type.
 
@@ -450,7 +450,7 @@
 
     @since UDK 3.2.0
 */
-template< typename T > inline const ::com::sun::star::uno::Type & SAL_CALL
+template< typename T > __inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL
 getCppuType() SAL_THROW(());
 
 /** Gets the meta type of IDL type char.
@@ -459,7 +459,7 @@
 
     @since UDK 3.2.0
 */
-template<> inline const ::com::sun::star::uno::Type & SAL_CALL
+template<> __inline__ __attribute__((always_inline)) const ::com::sun::star::uno::Type & SAL_CALL
 getCppuType< sal_Unicode >() SAL_THROW(());
 
 #endif
--- bridges/source/remote/urp/urp_marshal.cxx.orig	2006-01-16 18:54:24.956659179 +0100
+++ bridges/source/remote/urp/urp_marshal.cxx	2006-01-16 18:55:09.579055256 +0100
@@ -65,6 +65,144 @@
 	rtl_freeMemory( m_base );
 }
 
+sal_Bool Marshal::pack( void *pSource , typelib_TypeDescription *pType )
+{
+	sal_Bool bSuccess = sal_True;
+	switch( pType->eTypeClass )
+	{
+	case typelib_TypeClass_BYTE:
+	{
+		packInt8( pSource );
+		break;
+	}
+	case typelib_TypeClass_BOOLEAN:
+	{
+		ensureAdditionalMem( 1 );
+		*m_pos = ( *((sal_Bool*) pSource ) ) ? 1 : 0;
+		m_pos++;
+		break;
+	}
+
+	case typelib_TypeClass_CHAR:
+	case typelib_TypeClass_SHORT:
+	case typelib_TypeClass_UNSIGNED_SHORT:
+	{
+		packInt16( pSource );
+		break;
+	}
+	case typelib_TypeClass_ENUM:
+	case typelib_TypeClass_LONG:
+	case typelib_TypeClass_UNSIGNED_LONG:
+	case typelib_TypeClass_FLOAT:
+	{
+		packInt32( pSource );
+		break;
+	}
+	case typelib_TypeClass_DOUBLE:
+	case typelib_TypeClass_HYPER:
+	case typelib_TypeClass_UNSIGNED_HYPER:
+	{
+		ensureAdditionalMem( 8 );
+		if( isSystemLittleEndian() )
+		{
+			m_pos[0] = ((unsigned char *)pSource)[7];
+			m_pos[1] = ((unsigned char *)pSource)[6];
+			m_pos[2] = ((unsigned char *)pSource)[5];
+			m_pos[3] = ((unsigned char *)pSource)[4];
+			m_pos[4] = ((unsigned char *)pSource)[3];
+			m_pos[5] = ((unsigned char *)pSource)[2];
+			m_pos[6] = ((unsigned char *)pSource)[1];
+			m_pos[7] = ((unsigned char *)pSource)[0];
+		}
+		else
+		{
+			m_pos[7] = ((unsigned char *)pSource)[7];
+			m_pos[6] = ((unsigned char *)pSource)[6];
+			m_pos[5] = ((unsigned char *)pSource)[5];
+			m_pos[4] = ((unsigned char *)pSource)[4];
+			m_pos[3] = ((unsigned char *)pSource)[3];
+			m_pos[2] = ((unsigned char *)pSource)[2];
+			m_pos[1] = ((unsigned char *)pSource)[1];
+			m_pos[0] = ((unsigned char *)pSource)[0];
+		}
+		m_pos += 8;
+		break;
+	}
+	
+	case typelib_TypeClass_STRING:
+	{
+		packString( pSource );
+		break;
+	}
+	case typelib_TypeClass_TYPE:
+	{
+		packType( pSource );
+		break;
+	}
+	case typelib_TypeClass_ANY:
+	{
+		bSuccess = packAny( pSource );
+		break;
+	}
+	case typelib_TypeClass_TYPEDEF:
+	{
+		bSuccess = sal_False;
+		m_pBridgeImpl->addError( "can't handle typedef typedescriptions" );
+		break;
+	}
+	case typelib_TypeClass_INTERFACE:
+	{
+		remote_Interface *pRemoteI = *( remote_Interface ** )pSource;
+
+		::rtl::OUString sOid;
+		sal_uInt16 nIndex = 0xffff;
+		if( pRemoteI )
+		{
+			m_callback( pRemoteI , &(sOid.pData) );
+		
+			nIndex = m_pBridgeImpl->m_oidCacheOut.seek( sOid );
+			if( 0xffff == nIndex )
+			{
+				nIndex = m_pBridgeImpl->m_oidCacheOut.put( sOid );
+			}
+			else
+			{
+				// cached !
+				sOid = ::rtl::OUString();
+			}
+		}
+		packString( &sOid );
+		packInt16( &nIndex );
+		break;
+	}
+	case typelib_TypeClass_VOID:
+	{
+		// do nothing
+		break;
+	}
+	case typelib_TypeClass_EXCEPTION:
+	case typelib_TypeClass_STRUCT:
+	case typelib_TypeClass_SEQUENCE:
+	{
+		bSuccess = packRecursive( pSource, pType );
+		break;
+	}
+	default:
+	{
+		bSuccess = sal_False;
+		rtl::OUStringBuffer buf( 128 );
+		buf.appendAscii( RTL_CONSTASCII_STRINGPARAM( "can't handle values with typeclass " ) );
+		buf.append( (sal_Int32 ) pType->eTypeClass , 10 );
+		buf.appendAscii( RTL_CONSTASCII_STRINGPARAM( " (" ) );
+		buf.append( pType->pTypeName );
+		buf.appendAscii( RTL_CONSTASCII_STRINGPARAM( ")" ) );
+		m_pBridgeImpl->addError( buf.makeStringAndClear() );
+		break;
+	}
+	}
+	return bSuccess;
+}
+
 void Marshal::packOid( const ::rtl::OUString & oid )
 {
 	sal_uInt16 nIndex;
--- bridges/source/remote/urp/urp_marshal.hxx.orig	2005-09-08 00:47:30.000000000 +0200
+++ bridges/source/remote/urp/urp_marshal.hxx	2006-01-16 18:55:09.976960699 +0100
@@ -218,143 +224,6 @@
 		}
 	}
 
-	inline sal_Bool Marshal::pack( void *pSource , typelib_TypeDescription *pType )
-	{
-		sal_Bool bSuccess = sal_True;
-		switch( pType->eTypeClass )
-		{
-		case typelib_TypeClass_BYTE:
-		{
-			packInt8( pSource );
-			break;
-		}
-		case typelib_TypeClass_BOOLEAN:
-		{
-			ensureAdditionalMem( 1 );
-			*m_pos = ( *((sal_Bool*) pSource ) ) ? 1 : 0;
-			m_pos++;
-			break;
-		}
-
-		case typelib_TypeClass_CHAR:
-		case typelib_TypeClass_SHORT:
-		case typelib_TypeClass_UNSIGNED_SHORT:
-		{
-			packInt16( pSource );
-			break;
-		}
-		case typelib_TypeClass_ENUM:
-		case typelib_TypeClass_LONG:
-		case typelib_TypeClass_UNSIGNED_LONG:
-		case typelib_TypeClass_FLOAT:
-		{
-			packInt32( pSource );
-			break;
-		}
-		case typelib_TypeClass_DOUBLE:
-		case typelib_TypeClass_HYPER:
-		case typelib_TypeClass_UNSIGNED_HYPER:
-		{
-			ensureAdditionalMem( 8 );
-			if( isSystemLittleEndian() )
-			{
-				m_pos[0] = ((unsigned char *)pSource)[7];
-				m_pos[1] = ((unsigned char *)pSource)[6];
-				m_pos[2] = ((unsigned char *)pSource)[5];
-				m_pos[3] = ((unsigned char *)pSource)[4];
-				m_pos[4] = ((unsigned char *)pSource)[3];
-				m_pos[5] = ((unsigned char *)pSource)[2];
-				m_pos[6] = ((unsigned char *)pSource)[1];
-				m_pos[7] = ((unsigned char *)pSource)[0];
-			}
-			else
-			{
-				m_pos[7] = ((unsigned char *)pSource)[7];
-				m_pos[6] = ((unsigned char *)pSource)[6];
-				m_pos[5] = ((unsigned char *)pSource)[5];
-				m_pos[4] = ((unsigned char *)pSource)[4];
-				m_pos[3] = ((unsigned char *)pSource)[3];
-				m_pos[2] = ((unsigned char *)pSource)[2];
-				m_pos[1] = ((unsigned char *)pSource)[1];
-				m_pos[0] = ((unsigned char *)pSource)[0];
-			}
-			m_pos += 8;
-			break;
-		}
-		
-		case typelib_TypeClass_STRING:
-		{
-			packString( pSource );
-			break;
-		}
-		case typelib_TypeClass_TYPE:
-		{
-			packType( pSource );
-			break;
-		}
-		case typelib_TypeClass_ANY:
-		{
-			bSuccess = packAny( pSource );
-			break;
-		}
-		case typelib_TypeClass_TYPEDEF:
-		{
-			bSuccess = sal_False;
-			m_pBridgeImpl->addError( "can't handle typedef typedescriptions" );
-			break;
-		}
-		case typelib_TypeClass_INTERFACE:
-		{
-			remote_Interface *pRemoteI = *( remote_Interface ** )pSource;
-
-			::rtl::OUString sOid;
-			sal_uInt16 nIndex = 0xffff;
-			if( pRemoteI )
-			{
-				m_callback( pRemoteI , &(sOid.pData) );
-			
-				nIndex = m_pBridgeImpl->m_oidCacheOut.seek( sOid );
-				if( 0xffff == nIndex )
-				{
-					nIndex = m_pBridgeImpl->m_oidCacheOut.put( sOid );
-				}
-				else
-				{
-					// cached !
-					sOid = ::rtl::OUString();
-				}
-			}
-			packString( &sOid );
-			packInt16( &nIndex );
-			break;
-		}
-		case typelib_TypeClass_VOID:
-		{
-			// do nothing
-			break;
-		}
-		case typelib_TypeClass_EXCEPTION:
-		case typelib_TypeClass_STRUCT:
-		case typelib_TypeClass_SEQUENCE:
-		{
-			bSuccess = packRecursive( pSource, pType );
-			break;
-		}
-		default:
-		{
-			bSuccess = sal_False;
-			rtl::OUStringBuffer buf( 128 );
-			buf.appendAscii( RTL_CONSTASCII_STRINGPARAM( "can't handle values with typeclass " ) );
-			buf.append( (sal_Int32 ) pType->eTypeClass , 10 );
-			buf.appendAscii( RTL_CONSTASCII_STRINGPARAM( " (" ) );
-			buf.append( pType->pTypeName );
-			buf.appendAscii( RTL_CONSTASCII_STRINGPARAM( ")" ) );
-			m_pBridgeImpl->addError( buf.makeStringAndClear() );
-			break;
-		}
-		}
-		return bSuccess;
-	}
 }
 
 
--- bridges/source/remote/urp/urp_marshal_decl.hxx.orig	2005-09-08 00:47:44.000000000 +0200
+++ bridges/source/remote/urp/urp_marshal_decl.hxx	2006-01-16 18:54:07.386834415 +0100
@@ -58,7 +58,7 @@
   			);
 		~Marshal( );
 		
-		inline sal_Bool pack( void *pSource , typelib_TypeDescription *pType );
+		sal_Bool pack( void *pSource , typelib_TypeDescription *pType );
 
 		sal_Bool packRecursive( void *pSource, typelib_TypeDescription *pType );
 		
